##--CODE--##
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score

##--CODE--##
# Read the CSV file into a Pandas DataFrame
Lp100km = pd.read_csv('https://static.bc-edx.com/ai/ail-v-1-0/m12/lesson_1/datasets/liters-per-100km.csv')
Lp100km.head()

##--CODE--##
# Assign the "weight (kg)" feature to X1
# Assign the "weight (kg)" and "cylinders" features to X2
# Note: Scikit-learn requires a two-dimensional array of values
# so we use reshape() to create this

X1 = Lp100km["weight (kg)"].values.reshape(-1, 1)
X2 = Lp100km[["weight (kg)", "cylinders"]].values.reshape(-1, 2)
y = Lp100km["L/100km"].values.reshape(-1, 1)

##--CODE--##
# Use the Sklearn `train_test_split()` function to split the data into training and testing data
from sklearn.model_selection import train_test_split
X1_train, X1_test, X2_train, X2_test, y_train, y_test = train_test_split(X1, X2, y, random_state=42)

##--CODE--##
# Create the models
lr1 = LinearRegression()
lr2 = LinearRegression()

##--CODE--##
# Fit the first model to the training data with a single X feature. 
lr1.fit(X1_train, y_train)

# Fit the second model to the training data with two X features.
lr2.fit(X2_train, y_train)

##--CODE--##
# Calculate the mean_squared_error and the r-squared value
# for the testing data

from sklearn.metrics import mean_squared_error, r2_score

# Use our model to make predictions
predicted1 = lr1.predict(X1_test)
predicted2 = lr2.predict(X2_test)

# Score the predictions with mse and r2
mse1 = mean_squared_error(y_test, predicted1)
r21 = r2_score(y_test, predicted1)
mse2 = mean_squared_error(y_test, predicted2)
r22 = r2_score(y_test, predicted2)

print(f"Single Feature:")
print(f"mean squared error (MSE): {mse1}")
print(f"R-squared (R2): {r21}")
print("---------------------")
print(f"Two Features:")
print(f"mean squared error (MSE): {mse2}")
print(f"R-squared (R2): {r22}")
print("---------------------")
print(f"Difference: {r21-r22}")

##--CODE--##
# Provided code to create the adjusted r-squared function
def r2_adj(x, y, model):
    r2 = model.score(x,y)
    n_cols = x.shape[1]
    return 1 - (1 - r2) * (len(y) - 1) / (len(y) - n_cols - 1)

##--CODE--##
# Calculate the adjusted r-squared value of the model
adj_score1 = r2_adj(X1_test, y_test, lr1)
adj_score2 = r2_adj(X2_test, y_test, lr2)
print(f"1 Feature Adjusted R2: {adj_score1}")
print(f"2 Feature Adjusted R2: {adj_score2}")
print(f"Difference: {adj_score1-adj_score2}")

##--CODE--##
# Examine linear regression on the single feature data using cross validation
cv_scores = cross_val_score(LinearRegression(), X1_train, y_train, scoring = "r2")
print(f"All scores: {cv_scores}")
print(f"Mean score: {cv_scores.mean()}")
print(f"Standard Deviation: {cv_scores.std()}")

##--CODE--##


