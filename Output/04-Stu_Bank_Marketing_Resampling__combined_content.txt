## More Loans

In this activity you will pratice using random and SMOTE oversampling in combination with logistic regression to predict whether or not someone is likely to default on their credit card loans in a given month given demographic information. 

ln_balance_limit is the log of the maximum balance they can have on the card; 1 is female, 0 male for sex; the education is denoted: 1 = graduate school; 2 = university; 3 = high school; 4 = others; 1 is married and 0 single for marriage; default_next_month is whether the person defaults in the following month (1 yes, 0 no).

##--CODE--##
import pandas as pd
from path import Path
import pandas as pd
from collections import Counter

##--CODE--##
data = Path('../Resources/cc_default.csv')
df = pd.read_excel(data, skiprows=[0])

##--CODE--##
x_cols = [i for i in df.columns if i != 'default_next_month']
X = df[x_cols]
y = df['default_next_month']

##--CODE--##
# train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

##--CODE--##
Counter(y_train)

### Random Oversampling

##--CODE--##
from imblearn.over_sampling import RandomOverSampler
ros = RandomOverSampler(random_state=1)
X_resampled, y_resampled = ros.fit_resample(X_train, y_train)
Counter(y_resampled)

##--CODE--##
# Logistic regression using random oversampled data
from sklearn.linear_model import LogisticRegression
model = LogisticRegression(random_state=1)
model.fit(X_resampled, y_resampled)

##--CODE--##
# Display the confusion matrix
from sklearn.metrics import confusion_matrix
y_pred = model.predict(X_test)
confusion_matrix(y_test, y_pred)

##--CODE--##
from sklearn.metrics import balanced_accuracy_score
balanced_accuracy_score(y_test, y_pred)

##--CODE--##
# Print the imbalanced classification report
from imblearn.metrics import classification_report_imbalanced
print(classification_report_imbalanced(y_test, y_pred))

### SMOTE Oversampling

##--CODE--##
from imblearn.over_sampling import SMOTE
X_resampled, y_resampled = SMOTE(random_state=1, ratio=1.0).fit_resample(X_train, y_train)
from collections import Counter
Counter(y_resampled)

##--CODE--##
model = LogisticRegression(random_state=1)
model.fit(X_resampled, y_resampled)

##--CODE--##
# Calculated the balanced accuracy score
y_pred = model.predict(X_test)
balanced_accuracy_score(y_test, y_pred)

##--CODE--##
# Display the confusion matrix
confusion_matrix(y_test, y_pred)

##--CODE--##
# Print the imbalanced classification report
print(classification_report_imbalanced(y_test, y_pred))

##--CODE--##


