##--CODE--##
import pandas as pd
import tensorflow as tf
import numpy as np

# Import our utilities functions
import utils

## Prepare the Data

##--CODE--##
# Get the original DataFrame
df = utils.get_data()
df.head()

##--CODE--##
# Get the normalized ratings
normalized_ratings = utils.get_normalized_data()
normalized_ratings.head()

##--CODE--##
# Get the weights and bias tensors
W = utils.weights()
hb = utils.hidden_bias()
vb = utils.visible_bias()

##--CODE--##
# Get the users so we can send the users back into the model
users = normalized_ratings.index
users

##--CODE--##
# Create an empty DataFrame to store the recommendations
recommendation_scores = pd.DataFrame(columns=["movie_id", "user_id", "RecommendationScore"])
recommendation_scores

##--CODE--##
# Get recommendations for every user
for user in users:
    # Get user's ratings
    user_ratings = normalized_ratings.loc[user]

    # Generate the recommendations
    rec = utils.generate_recommendation(user_ratings, W, vb, hb)

    # Construct user DataFrame
    new_recommendation = pd.DataFrame({"movie_id": normalized_ratings.columns, "user_id": user})
    new_recommendation = new_recommendation.assign(RecommendationScore = rec[0].numpy())

    # Add recommendation to DataFrame
    recommendation_scores = pd.concat([recommendation_scores, new_recommendation])

recommendation_scores

##--CODE--##
# Merge all recommendation scores with original dataset ratings
# Inner merge because we cannot perform calculations on NaN values to evaluate the model
merged_df = recommendation_scores.merge(df, on=['movie_id', 'user_id'], how='inner')
merged_df

##--CODE--##
# normalize rating column
merged_df["rating"] = merged_df["rating"] / 5
merged_df

##--CODE--##
# Calculate RMSE
from sklearn.metrics import mean_squared_error

##--CODE--##
rmse = mean_squared_error(merged_df["rating"], merged_df["RecommendationScore"], squared=False)
print(rmse)

