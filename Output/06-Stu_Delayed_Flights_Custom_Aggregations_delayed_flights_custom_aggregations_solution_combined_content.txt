##--CODE--##
# Import the necessary dependencies
import pandas as pd

##--CODE--##
# Read in the data as a DataFrame
# Provide the dataset over AWS S3 bucket. It's ~100 MB.
delayed_flights_url = "https://static.bc-edx.com/ai/ail-v-1-0/m5/lesson_2/delayed_flights.csv"
delayed_flights_df = pd.read_csv(delayed_flights_url)
delayed_flights_df.head()

##--CODE--##
# Get the columns
delayed_flights_df.columns

##--CODE--##
# Create a custom function that will calculate of a column from the DataFrame.
def custom_avg(x):
    return x.mean()

##--CODE--##
# Show the average time for delayed arrivals (ArrDelay) grouped by each airline carrier.
# Pass the 'ArrDelay' column to the custom function.
# Name the new column "Avg_ArrDelay".
grouped_arrival_delay = delayed_flights_df.groupby("UniqueCarrier").apply(lambda x: pd.Series({"Avg_ArrDelay": custom_avg(x["ArrDelay"])}))
grouped_arrival_delay.head(10)

##--CODE--##
# Use the custom function you created to calculate the average for a DataFrame colummn and
# show the average time for delayed arrivals and departures for each carrier.
grouped_arrival_dept_delay = delayed_flights_df.groupby("UniqueCarrier").\
            apply(lambda x: pd.Series({"Avg_ArrDelay": custom_avg(x["ArrDelay"]),
                                       "Avg_DepDelay": custom_avg(x["DepDelay"])}))

grouped_arrival_dept_delay.head(10)

##--CODE--##
# Create a custom function that returns the total of the items.
def custom_sum(x):
    return x.sum()

##--CODE--##
# Use the two custom functions you created and show the total number of flights 
# and the average number of flights that were diverted for each flight origin and destination.
origin_dest_flights_cancelled_diverted = delayed_flights_df.groupby(["Origin","Dest"]).\
            apply(lambda x: pd.Series({"Total_Diverted": custom_sum(x["Diverted"]),
                                        "Avg_Diverted": custom_avg(x["Diverted"])}))
                                      


# Sort the results in descending order on the new columns, and display the top 25 results.
origin_dest_flights_cancelled_diverted.sort_values(by=['Total_Diverted','Avg_Diverted' ], ascending=False).head(25)

##--CODE--##
# Create two more custom functions.
# The first one returns the number of items.
def custom_count(x):
    return x.count()

# The second one calculates the percentage.
def custom_percentage(x): 
    if x.count()>0:
        return (x.sum()/x.count()*100).round(2)
    else:
        return 0

##--CODE--##
# Show the total number of diverted flights, the total flights, 
# and the percentage of diverted flights for each carrier by day of the week.
flights_diverted = delayed_flights_df.groupby(["UniqueCarrier","DayOfWeek"]).\
            apply(lambda x: pd.Series({"Total_Diverted": custom_sum(x["Diverted"]),
                                       "Number of Flights": custom_count(x["Diverted"]),
                                      "% of Flights Diverted":custom_percentage(x["Diverted"])}))


# Display the top 25 rows. 
flights_diverted.head(25)

##--CODE--##


