# Sports Article Objectivity

##--CODE--##
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import classification_report

##--CODE--##
# Load in data
df = pd.read_csv('https://static.bc-edx.com/ai/ail-v-1-0/m13/lesson_3/datasets/sports-articles.csv')
df

##--CODE--##
# Drop the label to create the X data
X = df.drop('Label', axis=1)
X

##--CODE--##
# Create the y set from the "Label" column
y = df["Label"]
y

##--CODE--##
# Split the data into training and testing sets using random_state=1
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

##--CODE--##
# Encode the y data with the label encoder
# Create an instance of the label encoder
le = LabelEncoder()

# Fit and transform the y training and testing data using the label encoder
y_train_encoded = le.fit_transform(y_train)
y_test_encoded = le.transform(y_test)
y_train_encoded

##--CODE--##
# Scale the X data by using StandardScaler()
scaler = StandardScaler().fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_train_scaled

##--CODE--##
# Transform the test dataset based on the fit from the training dataset
X_test_scaled = scaler.transform(X_test)
X_test_scaled

## Model and Fit to a Logistic Regression Classifier

##--CODE--##
# Create the logistic regression classifier model with a random_state of 1
lr_model = LogisticRegression(random_state=1)

# Fit the model to the training data
lr_model.fit(X_train_scaled, y_train_encoded)

##--CODE--##
# Validate the model by checking the model accuracy with model.score
print(f"Training Data Score: {lr_model.score(X_train_scaled, y_train_encoded)}")
print(f"Testing Data Score: {lr_model.score(X_test_scaled, y_test_encoded)}")

##--CODE--##
# Make predictions and produce the classification report
predictions = lr_model.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

## Model and Fit to a Support Vector Machine

##--CODE--##
# Create the support vector machine classifier model with a 'rbf' kernel
svm_model = SVC(kernel='rbf')

# Fit the model to the training data
svm_model.fit(X_train_scaled, y_train_encoded)

##--CODE--##
# Validate the model by checking the model accuracy with model.score
print(f"Training Data Score: {svm_model.score(X_train_scaled, y_train_encoded)}")
print(f"Testing Data Score: {svm_model.score(X_test_scaled, y_test_encoded)}")

##--CODE--##
# Make predictions and produce the classification report
predictions = svm_model.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

## Model and Fit to a KNN Model

##--CODE--##
# Create the KNN model with 11 neighbors
knn_model = KNeighborsClassifier(n_neighbors=11)

# Fit the model to the training data
knn_model.fit(X_train_scaled, y_train_encoded)

##--CODE--##
# Validate the model by checking the model accuracy with model.score
print(f"Training Data Score: {knn_model.score(X_train_scaled, y_train_encoded)}")
print(f"Testing Data Score: {knn_model.score(X_test_scaled, y_test_encoded)}")

##--CODE--##
# Make predictions and produce the classification report
predictions = knn_model.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

## Model and Fit to a Decision Tree Classifier

##--CODE--##
# Create the decision tree classifier model
dt_model = DecisionTreeClassifier()

# Fit the model to the training data
dt_model.fit(X_train_scaled, y_train_encoded)

##--CODE--##
# Validate the model by checking the model accuracy with model.score
print(f"Training Data Score: {dt_model.score(X_train_scaled, y_train_encoded)}")
print(f"Testing Data Score: {dt_model.score(X_test_scaled, y_test_encoded)}")

##--CODE--##
# Make predictions and produce the classification report
predictions = dt_model.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

## Model and Fit to a Random Forest Classifier

##--CODE--##
# Create the random forest classifier model
# with n_estimators=128 and random_state=1
rf_model = RandomForestClassifier(n_estimators=128, random_state=1)

# Fit the model to the training data
rf_model.fit(X_train_scaled, y_train_encoded)

##--CODE--##
# Validate the model by checking the model accuracy with model.score
print(f"Training Data Score: {rf_model.score(X_train_scaled, y_train_encoded)}")
print(f"Testing Data Score: {rf_model.score(X_test_scaled, y_test_encoded)}")

##--CODE--##
# Make predictions and produce the classification report
predictions = rf_model.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

## Model and Fit to a Gradient Boosting Classifier

##--CODE--##
# Train the Gradient Boosting classifier
clf = GradientBoostingClassifier(random_state=1).fit(X_train_scaled, y_train_encoded)

# Evaluate the model
print(f'Training Score: {clf.score(X_train_scaled, y_train_encoded)}')
print(f'Testing Score: {clf.score(X_test_scaled, y_test_encoded)}')

##--CODE--##
# Make predictions and produce the classification report
predictions = clf.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

## Model and Fit to an Adaptive Boosting Classifier

##--CODE--##
# Train the AdaBoostClassifier
clf = AdaBoostClassifier(random_state=1).fit(X_train_scaled, y_train_encoded)

# Evaluate the model
print(f'Training Score: {clf.score(X_train_scaled, y_train_encoded)}')
print(f'Testing Score: {clf.score(X_test_scaled, y_test_encoded)}')

##--CODE--##
# Make predictions and produce the classification report
predictions = clf.predict(X_test_scaled)
print(classification_report(y_test_encoded, predictions))

##--CODE--##


