##--CODE--##
# Initial imports
import pandas as pd
from sklearn import tree
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Needed for decision tree visualization
import pydotplus
from IPython.display import Image

## Loading and Preprocessing Crowdfunding Data

Load the `app-data.csv` in a pandas DataFrame called `app_data`.

##--CODE--##
# Load data
file_path = "https://static.bc-edx.com/ai/ail-v-1-0/m13/lesson_2/datasets/app-data.csv"
app_data = pd.read_csv(file_path)
app_data.head()

Define the features set, by copying the `df_crowdfunding` DataFrame and dropping the `outcome` column.

##--CODE--##
# Define features set
X = app_data.copy()
X.drop("Result", axis=1, inplace=True)
X.head()

Create the target vector by assigning the values of the `Result` column from the `app_data` DataFrame.

##--CODE--##
# Define target vector
y = app_data["Result"].values.reshape(-1, 1)
y[:5]

Split the data into training and testing sets.

##--CODE--##
# Splitting into Train and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=78)

Use the `StandardScaler` to scale the features data, remember that only `X_train` and `X_test` DataFrames should be scaled.

##--CODE--##
# Create the StandardScaler instance
scaler = StandardScaler()

##--CODE--##
# Fit the StandardScaler with the training data
X_scaler = scaler.fit(X_train)

##--CODE--##
# Scale the training data
X_train_scaled = X_scaler.transform(X_train)
X_test_scaled = X_scaler.transform(X_test)

## Fitting the Decision Tree Model

Once data is scaled, create a decision tree instance and train it with the training data (`X_train_scaled` and `y_train`).

##--CODE--##
# Create the decision tree classifier instance


##--CODE--##
# Fit the model


## Making Predictions Using the Tree Model

Validate the trained model, by predicting crowdfunding success using the testing data (`X_test_scaled`).

##--CODE--##
# Making predictions using the testing data


## Model Evaluation

Evaluate model's results, by using `sklearn` to calculate the accuracy score.

##--CODE--##
# Calculate the accuracy score


## Visualizing the Decision Tree

In this section, you should create a visual representation of the decision tree using `pydotplus`. Show the graph on the notebook, and also save it in `PDF` and `PNG` formats.

##--CODE--##
# Create DOT data


# Draw graph


# Show graph


##--CODE--##
# When saving the image, graph.write_<file_type>() must take a string object

# Save the tree as PDF


# Save the tree as PNG


##--CODE--##


