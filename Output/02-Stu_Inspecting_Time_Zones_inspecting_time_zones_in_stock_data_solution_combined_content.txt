##--CODE--##
# Import the required libraries and dependencies.
import pandas as pd

##--CODE--##
# Read the data from the tsla_historical.csv file into a Pandas DataFrame
df_tsla = pd.read_csv("../Resources/tsla_historical.csv")

##--CODE--##
# Display the first five rows of the DataFrame
df_tsla.head()

##--CODE--##
# Inspect the DataFrame's data types using the info function
df_tsla.info()

##--CODE--##
df_tsla["time"] = pd.to_datetime(
    df_tsla["time"],
    utc = True    
)

##--CODE--##
df_tsla["time"] = pd.to_datetime(
    df_tsla["time"], 
    format='%Y-%m-%d %H:%M:%S%z', 
    utc=True)
# https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior

##--CODE--##
# Transform the time column to a datetime data type
df_tsla["time"] = pd.to_datetime(
    df_tsla["time"],
    infer_datetime_format = True,
    utc = True    
)

##--CODE--##
# Display the first five rows of the DataFrame to confirm
# changes to the time column
df_tsla.head()

##--CODE--##
# Use the info function to confirm the change in data type 
# for the time column
df_tsla.info()

##--CODE--##
# Convert the time column to the Europe/Berlin timezone
df_tsla["time"] = df_tsla["time"].dt.tz_convert("Europe/Berlin")

##--CODE--##
# View the first five rows of the DataFrame to confirm the
# conversion of the time column
df_tsla.head()

##--CODE--##
# Use the info function to confirm the change in the time zone
# associated with the time column
df_tsla.info()

##--CODE--##


