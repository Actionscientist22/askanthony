##--CODE--##
from sklearn.datasets import make_regression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error

##--CODE--##
# Create some synthesized data
X, y = make_regression(n_samples = 5000, n_features=1, n_targets=1, noise=2, random_state=0)

##--CODE--##
# Split the data into training and testing sets.
X_train, X_test, y_train, y_test = train_test_split(X, y)

##--CODE--##
# Scale the training data
scaler = StandardScaler()
X_train_transformed = scaler.fit_transform(X_train)

##--CODE--##
# Create and train a Ridge model with an alpha of 1
model = Ridge(alpha=1)
model.fit(X_train_transformed, y_train)

##--CODE--##
# Scale the X testing data and use the model to make predictions
X_test_transformed = scaler.transform(X_test)
y_predicted = model.predict(X_test_transformed)

##--CODE--##
# Calculate the mean_squared_error
mean_squared_error(y_test, y_predicted)

### Use cross validation to select alpha

##--CODE--##
# Create a RidgeCV model and train it with the scaled data
# Use values of 0.001, 0.01, 0.1, 1, and 10 for alpha
from sklearn.linear_model import RidgeCV
model_cv = RidgeCV(alphas=[0.001, 0.01, 0.1, 1, 10])
model_cv = model_cv.fit(X_train_transformed, y_train)

##--CODE--##
# Display the alpha of the best model
model_cv.alpha_

##--CODE--##
# Create a model using the best alpha
model2 = Ridge(alpha=0.01)

# Train the model
model2.fit(X_train_transformed, y_train)

# Create predictions and calculate the mean squared error
y_predicted2 = model2.predict(X_test_transformed)
mean_squared_error(y_test, y_predicted2)

##--CODE--##


