##--CODE--##
from sklearn.datasets import make_regression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
import pandas as pd

##--CODE--##
df = pd.read_csv('https://static.bc-edx.com/ai/ail-v-1-0/m12/lesson_2/datasets/real-estate-evaluation.csv')
df.head()

##--CODE--##
# Separate the data into features and target 
X = df.drop('Y house price of unit area', axis=1)
y = df['Y house price of unit area']

##--CODE--##
# Check the features shape 
X.shape

### Perform ridge regression

##--CODE--##
# Split the data into training and testing sets


##--CODE--##
# Scale the training data


##--CODE--##
# Create and train the model


##--CODE--##
# Scale the testing data and create predictions


##--CODE--##
# Assess the MSE


##--CODE--##
# Use RidgeCV to optimize for alpha
from sklearn.linear_model import RidgeCV


##--CODE--##
# Identify the optimzied alpha value


### Compare performance with a linear regression model

##--CODE--##
# Create and train a linear regression model, create predictions with the model, and evaluate its MSE
from sklearn.linear_model import LinearRegression


### Lasso regression

##--CODE--##
from sklearn.linear_model import Lasso

##--CODE--##
# Create and train a lasso regression model


##--CODE--##
# Get the model coeffcients


##--CODE--##
# Create predictions with the model


### Assess the lasso regression MSE and compare to ridge regression

##--CODE--##
# Evaluate the MSE


##--CODE--##


