##--CODE--##
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from matplotlib import pyplot as plt
from PIL import Image
import requests
import numpy as np
import pandas as pd
import io
import pickle

##--CODE--##
# Import the preprocessed data
X_preprocessed_url = "https://static.bc-edx.com/ai/ail-v-1-0/m19/lesson_2/datasets/pickles/preprocessed_fungi.pkl"
y_url = "https://static.bc-edx.com/ai/ail-v-1-0/m19/lesson_2/datasets/pickles/fungi_y.pkl"

X = pickle.load(io.BytesIO(requests.get(X_preprocessed_url).content))
y = pickle.load(io.BytesIO(requests.get(y_url).content))

print(X[0])
print(y.head())

##--CODE--##
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# Label encode the y data
y_encoder = LabelEncoder().fit(y)
y = y_encoder.transform(y)

# Convert values to numpy arrays
X = np.array(X)

# Split the training dataset into training and validation sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


##--CODE--##
# Create an ImageDataGenerator


##--CODE--##
# Create an emtpty list for X and y augmentations


# Loop through the entire X_train set
    # Select the original image and its y label
 

    # Ensure that the input data has the correct shape

    # Add 5 new images for every original

        # Create and append the image
        
        # Append the original label


# Print the length of the augmented images and the labels


##--CODE--##
# Export our final variables to a pickle file using a dictionary
from google.colab import drive
drive.mount('/content/drive')

# Create the dictionary
fungi_dict = {
    'X_train': X_train_aug,
    'X_test': X_test,
    'y_train': y_train_aug,
    'y_test': y_test
}

# Store the dictionary in a pickle file
with open('/content/drive/My Drive/fungi_dict.pkl', 'wb') as file:
    pickle.dump(fungi_dict, file)

##--CODE--##


