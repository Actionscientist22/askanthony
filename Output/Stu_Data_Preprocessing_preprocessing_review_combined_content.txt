##--CODE--##
import pandas as pd

##--CODE--##
# Import the data with the following arguments:
# delimiter=";", encoding="latin_1"
rent_data = pd.read_csv("https://static.bc-edx.com/ai/ail-v-1-0/m12/lesson_1/datasets/apartments-for-rent.csv", delimiter=";", encoding="latin_1")
rent_data

##--CODE--##
# Check dtypes
rent_data.dtypes

##--CODE--##
# Drop columns: "id", "title", "body", "currency", "price_display", "address"
columns_to_drop = ["id", "title", "body", "currency", "price_display", "address"]
rent_data_cleaned = rent_data.copy().drop(columns=columns_to_drop)
rent_data_cleaned

## Split the amenities into separate columns

The amenities column may contain multiple amenities, separated by a comma. Each amenity should have its own column with binary values where 0 means the property does not have the amenity and 1 means that it does.

##--CODE--##
# Get a list of the amenities
amenities = rent_data_cleaned["amenities"].dropna().drop_duplicates().to_list()
amenities

##--CODE--##
# Join the amenities list items, separated by a comma
amenities_joined = ','.join(amenities)
amenities_joined

##--CODE--##
# Get single amenities in a list with no duplicates
amenities_list = list(dict.fromkeys(amenities_joined.split(",")))
amenities_list

##--CODE--##
# Add columns for each amenity
rent_data_cleaned[amenities_list] = 0
rent_data_cleaned[amenities_list]

##--CODE--##
# Update the amenities columns
# Loop through the amenities list
for amenity in amenities_list:
    rent_data_cleaned.loc[rent_data_cleaned["amenities"].str.contains(amenity, na=False),amenity] = 1
rent_data_cleaned

##--CODE--##
# Drop the (combined) amenities column
rent_data_cleaned = rent_data_cleaned.drop(columns="amenities")
rent_data_cleaned.head()

##--CODE--##
# Check the dtypes again
rent_data_cleaned.dtypes

## Remaining categorical features and their values

```text
category         'housing/rent/apartment', 'housing/rent/home',
                 'housing/rent/short_term'
fee              'No'
has_photo        'Thumbnail', 'Yes', 'No'
pets_allowed     'None', 'Cats,Dogs', 'Cats', 'Dogs'
price_type       'Monthly', 'Weekly', 'Monthly|Weekly'
cityname         1575 cities in dataset
state            52 states in dataset
source           'RentLingo', 'Listanza', 'ListedBuy', 'RentDigs.com', 'GoSection8',
                 'RealRentals', 'RENTOCULAR', 'rentbits', 'Home Rentals',
                 'Real Estate Agent', 'RENTCaf√©', 'tenantcloud'
```

##--CODE--##
# Create a list of the columns to encode
columns_to_encode = ["category", 
                     "fee", 
                     "has_photo", 
                     "pets_allowed", 
                     "price_type", 
                     "cityname", 
                     "state", 
                     "source"]

## Pandas encoding methods

##--CODE--##
# Encode using pd.get_dummies()
rent_data_dummies = pd.get_dummies(rent_data_cleaned)
rent_data_dummies.head()

##--CODE--##
# Check column names
rent_data_dummies.columns

##--CODE--##
# Use Pandas .astype("category").cat.codes for single column category encoding
# Copy rent_data_cleaned
rent_data_cat_codes = rent_data_cleaned.copy()

# Loop through columns_to_encode and convert the columns to category codes
for column in columns_to_encode:
    rent_data_cat_codes[column] = rent_data_cat_codes[column].astype("category").cat.codes

rent_data_cat_codes.head()

##--CODE--##
# Check dtypes
rent_data_cat_codes.dtypes

## Scikit-learn encoding methods

##--CODE--##
# OneHotEncoder
# Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html
from sklearn.preprocessing import OneHotEncoder

##--CODE--##
# Set up the OneHotEncoder so it will transform to Pandas
ohe = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
ohe.set_output(transform="pandas")

# Fit and transform the OneHotEncoder to the columns to encode
rent_data_ohe = ohe.fit_transform(rent_data_cleaned[columns_to_encode])
rent_data_ohe.head()

##--CODE--##
# LabelEncoder
# Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html
from sklearn.preprocessing import LabelEncoder

# Create an instance of the label encoder
le = LabelEncoder()

# Copy rent_data_cleaned
rent_data_label_encoded = rent_data_cleaned.copy()

# Fit and transform the label encoder for each column
for column in columns_to_encode:
    rent_data_label_encoded[column] = le.fit_transform(rent_data_label_encoded[column])

rent_data_label_encoded.head()

##--CODE--##
# Check dtypes
rent_data_label_encoded.dtypes

## Split into Training and Testing Data

##--CODE--##
# Import module
from sklearn.model_selection import train_test_split

##--CODE--##
# Choose one of the encoded datasets to split into training and testing sets
# Get the features data, dropping the target "price" and other features you don't want to include
X = rent_data_label_encoded.copy().drop(columns=["price", 
                                                 "latitude", 
                                                 "longitude", 
                                                 "cityname", 
                                                 "state", 
                                                 "fee", 
                                                 "source"])
X.head()

##--CODE--##
# Get the target variable "price" and assign it to y
y = rent_data_label_encoded["price"]
y.head()

##--CODE--##
# Use the Sklearn `train_test_split()` function to split the data into training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

##--CODE--##
# Display X_train
X_train

##--CODE--##
# Display X_test
X_test

##--CODE--##
# Display y_train
y_train

##--CODE--##
# Display y_test
y_test

##--CODE--##


