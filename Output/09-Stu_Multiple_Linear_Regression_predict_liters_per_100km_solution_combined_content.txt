##--CODE--##
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

##--CODE--##
# Read the CSV file into a Pandas DataFrame
Lp100km = pd.read_csv('https://static.bc-edx.com/ai/ail-v-1-0/m12/lesson_1/datasets/liters-per-100km.csv')
Lp100km.head()

## Visualize the Data to Find Any Linear Trends

##--CODE--##
# Plot the cylinders & L/100km to find out if a linear trend exists
Lp100km.plot.scatter(x='cylinders', y='L/100km')

##--CODE--##
# Plot the displacement & L/100km to find out if a linear trend exists

Lp100km.plot.scatter(x='displacement', y='L/100km')

##--CODE--##
# Plot the horesepower & L/100km to find out if a linear trend exists

Lp100km.plot.scatter(x='horsepower', y='L/100km')

##--CODE--##
# Plot the weight (kg) & L/100km to find out if a linear trend exists

Lp100km.plot.scatter(x='weight (kg)', y='L/100km')

##--CODE--##
# Plot the acceleration & L/100km to find out if a linear trend exists

Lp100km.plot.scatter(x='acceleration', y='L/100km')

##--CODE--##
# Assign the variable X to the two features that appear to have the most linear relationship with L/100km
# Note: scikit-learn requires a two-dimensional array of values
# so we use reshape() to create this

X = Lp100km[["weight (kg)", "displacement"]].values.reshape(-1, 2)
y = Lp100km["L/100km"].values.reshape(-1, 1)

print("Shape: ", X.shape, y.shape)

##--CODE--##
# Use the Sklearn `train_test_split()` function to split the data into training and testing data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

##--CODE--##
# Create the model
model = LinearRegression()

##--CODE--##
# Fit the model to the training data. 
model.fit(X_train, y_train)

##--CODE--##
# Calculate the mean_squared_error and the r-squared value
# for the testing data

from sklearn.metrics import mean_squared_error, r2_score

# Use our model to make predictions
predicted = model.predict(X_test)

# Score the predictions with mse and r2
mse = mean_squared_error(y_test, predicted)
r2 = r2_score(y_test, predicted)

print(f"mean squared error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

##--CODE--##
# Call the `score()` method on the model to show the R2 score
model.score(X_test, y_test)

##--CODE--##


