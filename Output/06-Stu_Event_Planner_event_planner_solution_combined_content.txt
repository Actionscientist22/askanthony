##--CODE--##
# Imports for loading environment variables.
from dotenv import load_dotenv
import os

##--CODE--##
# Load environment variables.
load_dotenv()

# Set the model name for our LLMs.
OPENAI_MODEL = "gpt-3.5-turbo"
# Store the API key in a variable.
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

##--CODE--##
# Additional imports for entity-based memory.
from langchain_openai import ChatOpenAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationEntityMemory
from langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATE

##--CODE--##
# Initialize the model.
llm = ChatOpenAI(openai_api_key=OPENAI_API_KEY, model_name=OPENAI_MODEL, temperature=0.0)

##--CODE--##
# Initialize an object for conversational memory.
buffer = ConversationEntityMemory(llm=llm)

##--CODE--##
# Create the chain for conversation, using a ConversationBufferMemory object.
conversation = ConversationChain(
    llm=llm, 
    memory=buffer, 
    #verbose=True, 
    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE
)

##--CODE--##
# Prompt the user for their name.
name = input("What is your name?")
# Prompt the user for a description of their likes and dislikes.
description = input("Please describe your likes and dislikes.")

##--CODE--##
# Create the query and run the chain with it.
query = f"My name is {name} and I will be organizing an activity and attending. {description}"
conversation.invoke(input=query)

##--CODE--##
# Prompt the user for the number of other people.
n_people = int(input("How many other people do you want to plan the activity for?"))

##--CODE--##
# Loop for each other person.
for i in range(n_people):
    # Prompt the user for the attendee's name.
    name = input("What is this attendee's name?")
    # Prompt the user for the attendee's likes and dislikes.
    description = input(f"Please describe {name}'s likes and dislikes.")

    # Construct a query for this attendee and run the chain.
    query = f"{name} will be attending. {description}"
    conversation.run(input=query)

##--CODE--##
# Define a final query as a string.
query = "What would be a good activity to plan for all the people mentioned?"

##--CODE--##

# Pass the query to the predict method which will make a prediction based on the query, and print the result.
result = conversation.predict(input=query)
print(result, end='\n')

