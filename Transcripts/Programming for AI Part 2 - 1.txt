WEBVTT

1
00:00:06.750 --> 00:00:11.389
Anthony Taylor: Technically. you don't have to do what I'm about to tell you.

2
00:00:11.490 --> 00:00:14.490
Anthony Taylor: but I would recommend it not today.

3
00:00:14.670 --> 00:00:15.770
Anthony Taylor: You still have talent.

4
00:00:16.020 --> 00:00:21.719
Anthony Taylor:  I want you. I will ask you guys at some point, get an open AI Api key.

5
00:00:21.740 --> 00:00:29.530
Anthony Taylor: You have to give them a card. There is potential that you might get a little bit of a bill, but I will tell you, you know. Hey?

6
00:00:29.560 --> 00:00:35.710
Anthony Taylor: Don't do this 50 times a day. It might cost you a dollar or something like that. Okay, we're talking

7
00:00:35.720 --> 00:00:41.830
Anthony Taylor: minuscule amounts unless you like. Release something to the public and like a million people at once.

8
00:00:42.360 --> 00:00:43.320
Anthony Taylor: That could be bad.

9
00:00:43.520 --> 00:00:51.200
Anthony Taylor:  But yeah, open. AI announced that you can now use chatty PT. 4

10
00:00:51.550 --> 00:00:54.629
Anthony Taylor: on with their Api. They didn't allow it.

11
00:00:55.220 --> 00:00:59.940
Anthony Taylor: So now we get even better stuff than we did before.

12
00:01:00.080 --> 00:01:05.009
Anthony Taylor:  so alright! So that's real quick.

13
00:01:05.930 --> 00:01:08.969
Anthony Taylor: I wanna go over resources. So everyone

14
00:01:09.130 --> 00:01:11.999
Anthony Taylor: seem to have a pretty busy week.

15
00:01:13.110 --> 00:01:14.940
Anthony Taylor: With

16
00:01:15.370 --> 00:01:19.320
Anthony Taylor: homework. Set a pretty fair statement

17
00:01:21.300 --> 00:01:26.910
Meredith McCanse (she/her): 3 or 4 entire days working on it.

18
00:01:27.110 --> 00:01:31.910
Anthony Taylor: That's 24 h, Meredith. Well, actually, that's like 7, 2

19
00:01:32.980 --> 00:01:38.220
Anthony Taylor: entire days. but we do exist. So let me start with the 20 h thing

20
00:01:38.960 --> 00:01:42.799
Anthony Taylor: we tell everybody. When you start, we expect that you're gonna spend

21
00:01:43.030 --> 00:01:48.949
Anthony Taylor: 9 h with me 20 h without? Okay, that's expensive.

22
00:01:49.460 --> 00:01:52.349
Anthony Taylor: Does every student have to do that? No.

23
00:01:52.740 --> 00:01:59.569
Anthony Taylor:  But we find that that tends to be where the most successful students are. That's the sweet spot.

24
00:02:00.220 --> 00:02:04.399
Anthony Taylor: Okay, if you're doing 20 h and you're doing what I'm about to tell you.

25
00:02:05.100 --> 00:02:06.680
Anthony Taylor: Most of this will

26
00:02:07.940 --> 00:02:08.820
Anthony Taylor: just happen.

27
00:02:09.660 --> 00:02:13.759
Anthony Taylor: Okay, things you can do in those 20 h.

28
00:02:14.030 --> 00:02:18.039
Anthony Taylor: Well, let's start with before class. I give you resources.

29
00:02:18.510 --> 00:02:24.649
Anthony Taylor: every class. Hopefully. I remember  for every single class.

30
00:02:25.040 --> 00:02:32.390
Anthony Taylor: Those resources tend to be short. simple. They shouldn't take you more than 20 min to go through.

31
00:02:33.320 --> 00:02:35.970
Anthony Taylor: Alright. But let's be nice. Give you 30 min.

32
00:02:36.720 --> 00:02:42.020
Anthony Taylor: Okay, so that's number one come to class. Sit through class. I don't care

33
00:02:42.250 --> 00:02:47.590
Anthony Taylor: if you do the instructor activities or sit there and watch. That's good, either way, because.

34
00:02:48.210 --> 00:02:50.840
Anthony Taylor: after all, the activities are done for the day.

35
00:02:51.900 --> 00:02:56.339
Anthony Taylor: you're going to get a recording either that night or the next morning. you should

36
00:02:56.800 --> 00:03:02.280
Anthony Taylor: either a go over the activities again without the recording. See how you do.

37
00:03:03.140 --> 00:03:06.920
Anthony Taylor: ones you have trouble with. Go watch them in the recording and do them again.

38
00:03:07.520 --> 00:03:10.570
Anthony Taylor: or watch them in the recording and do them again.

39
00:03:11.250 --> 00:03:23.260
Anthony Taylor: Alright. so you're comfortable with that. So let's just say watched every second of the reporting probably 3 h. and we're not even up to 4 h yet.

40
00:03:24.190 --> 00:03:28.320
Anthony Taylor: Okay, then you start looking at concepts that you're struggling with.

41
00:03:28.360 --> 00:03:34.359
Anthony Taylor: I don't get these while loops. I don't understand what this means. I don't get this comprehension.

42
00:03:34.680 --> 00:03:36.829
Anthony Taylor: Google, it chat, gpt

43
00:03:38.390 --> 00:03:39.490
Anthony Taylor: Youtube, it.

44
00:03:39.840 --> 00:03:42.520
Anthony Taylor: Yeah. Actually, there's great freaking videos on Youtube.

45
00:03:43.230 --> 00:03:44.240
Anthony Taylor: Okay.

46
00:03:44.290 --> 00:03:49.019
Anthony Taylor:  you know. And and that's it. So I mean.

47
00:03:52.110 --> 00:04:04.390
Anthony Taylor: the hardest part, I think, for students, especially the first couple weeks is you feel like you're just being bombarded with stuff. Okay? But if we actually broke down how many things I showed you last week.

48
00:04:04.470 --> 00:04:06.219
Anthony Taylor: it's like less than 20.

49
00:04:07.990 --> 00:04:11.510
Anthony Taylor: It's not that much. Putting it all together is

50
00:04:12.530 --> 00:04:16.790
Anthony Taylor: okay, and that's gonna take practice. But you can't get practice in one week.

51
00:04:17.149 --> 00:04:24.129
Anthony Taylor: Practice is gonna take weeks promise. And I say this, and I know it to be true.

52
00:04:24.590 --> 00:04:30.860
Anthony Taylor: Around week 4 or 5, you're gonna be totally caught up with everything in your head, and this is gonna be

53
00:04:31.510 --> 00:04:35.380
Anthony Taylor: easier kind of easy but easier.

54
00:04:35.810 --> 00:04:40.739
Anthony Taylor: Okay, I do not expect, especially for this course. This is a freaking AI course.

55
00:04:41.810 --> 00:04:56.259
Anthony Taylor: Right? I mean, data. Analysis is our data. Science is hard. But in data analysis, data, science, they don't do data science till week 20. You guys are going to do data science and week 8, it's the thing was on the

56
00:04:56.580 --> 00:04:57.600
Mcpherson, Michael: the counter.

57
00:04:57.610 --> 00:05:02.080
Anthony Taylor: Like Mike said, data, science is on week is on account

58
00:05:03.020 --> 00:05:04.779
Anthony Taylor: he's like, Oh, crap! I'm not muted.

59
00:05:07.000 --> 00:05:08.039
Anthony Taylor: But yeah.

60
00:05:08.850 --> 00:05:12.240
Anthony Taylor: Okay. Week 8, you're gonna be doing data science

61
00:05:13.610 --> 00:05:17.419
Anthony Taylor: machine learning. That's wild.

62
00:05:19.200 --> 00:05:23.390
Anthony Taylor: Okay, so get these habits in place today.

63
00:05:24.420 --> 00:05:27.009
Anthony Taylor: Things I'm super pleased with.

64
00:05:27.150 --> 00:05:30.549
Anthony Taylor: okay, you guys in slack are amazing.

65
00:05:31.190 --> 00:05:32.340
Anthony Taylor: amazing.

66
00:05:32.800 --> 00:05:37.850
Anthony Taylor: I am so happy. There's nothing that makes me feel better than seeing you guys help each other

67
00:05:38.030 --> 00:05:40.589
Anthony Taylor: and talk to each other and encourage each other.

68
00:05:40.890 --> 00:05:50.569
Anthony Taylor: and that is the difference. I was talking before class, I said, you guys will link in with me, and you will have me for the rest of your careers or the rest of mine.

69
00:05:51.410 --> 00:05:54.520
Anthony Taylor: Okay, I promise I won't ever ignore you.

70
00:05:55.990 --> 00:05:56.890
Anthony Taylor: I

71
00:05:57.590 --> 00:06:00.470
Anthony Taylor: but you don't ask me Google questions.

72
00:06:01.190 --> 00:06:05.579
Anthony Taylor: You're gonna ask me hopefully, like hard questions, like career questions.

73
00:06:05.700 --> 00:06:10.060
Anthony Taylor: You know. we've got. We want to architect this. What do you think stuff like that.

74
00:06:10.400 --> 00:06:16.540
Anthony Taylor: you know. But Google questions or other things. Ask your peers. These are your peers guys.

75
00:06:17.030 --> 00:06:19.240
Anthony Taylor: these people you may work with again.

76
00:06:20.900 --> 00:06:23.260
Anthony Taylor: Okay, so ask them.

77
00:06:25.100 --> 00:06:25.980
Anthony Taylor: alright.

78
00:06:26.100 --> 00:06:29.240
Anthony Taylor: the the more you do that the better.

79
00:06:30.410 --> 00:06:31.300
Anthony Taylor: Okay?

80
00:06:32.700 --> 00:06:33.600
Anthony Taylor: So

81
00:06:34.990 --> 00:06:36.030
Anthony Taylor: I think that's it.

82
00:06:36.780 --> 00:06:44.319
Anthony Taylor: Let's say, oh, all the resources available to you. So we talked about videos. Obviously, we talked about the resources I give you.

83
00:06:44.570 --> 00:06:47.909
Anthony Taylor: You have asked Vcs. I do understand.

84
00:06:48.560 --> 00:06:50.609
Ask Pcs. And tutoring

85
00:06:50.800 --> 00:06:55.120
Anthony Taylor: some good, some bad. I've heard all ranges.

86
00:06:55.420 --> 00:06:58.519
Anthony Taylor: Tutors, you do not have to take the same one.

87
00:06:58.760 --> 00:07:01.939
Anthony Taylor: so if you get one, you don't like feel free to schedule with a different

88
00:07:02.770 --> 00:07:08.079
Anthony Taylor:  the ask. Vcs, you will almost always get somebody new

89
00:07:08.270 --> 00:07:10.349
Anthony Taylor: cause. I don't even know where these people are.

90
00:07:10.480 --> 00:07:13.680
Anthony Taylor: They could all be in India or China or

91
00:07:13.830 --> 00:07:14.540
Anthony Taylor: somewhere.

92
00:07:15.310 --> 00:07:31.030
Anthony Taylor: Okay, tutoring, I said, tutoring instead aspcs. And then the ta thing, I have to remind everybody about the ta thing we do have a couple of rules that I used to enforce with calendly. I don't use calendar anymore.

93
00:07:31.220 --> 00:07:34.780
Anthony Taylor: Don't schedule more than one class in advance.

94
00:07:35.060 --> 00:07:41.900
Anthony Taylor: Okay, you don't actually know if you have questions. 2 glasses from now. You don't know that I'm not going to answer those questions

95
00:07:42.130 --> 00:07:45.800
Anthony Taylor: next class, so don't ask before you know.

96
00:07:45.970 --> 00:07:51.009
Anthony Taylor:  The idea of the ta spots is to help you. If you feel stuck.

97
00:07:51.120 --> 00:07:54.239
Anthony Taylor: you don't know where to start. Get a ta type.

98
00:07:55.010 --> 00:07:59.779
Anthony Taylor: Okay, 15 min is plenty of time for them to help you start.

99
00:08:00.760 --> 00:08:02.470
Anthony Taylor: No, Tanya.

100
00:08:03.040 --> 00:08:06.740
Anthony Taylor: it's not well. sometimes.

101
00:08:06.970 --> 00:08:12.509
Raugewitz, Tania: many times, I mean, I think in time it will be. But just as we're just not

102
00:08:13.480 --> 00:08:21.519
Raugewitz, Tania: III don't know. It's just 15 min goes goes by really fast when you're trying to explain, get each other on the same page, and then

103
00:08:21.950 --> 00:08:28.710
Raugewitz, Tania: maybe you have 3 min, and I think you got to start a little late, too, which probably didn't help.

104
00:08:29.080 --> 00:08:33.809
Anthony Taylor: But, we'll fix that. Don't worry, and it gets it gets easier.

105
00:08:34.150 --> 00:08:35.440
Anthony Taylor: So

106
00:08:37.750 --> 00:08:41.080
Anthony Taylor:  yeah, it's it gets easier.

107
00:08:42.419 --> 00:08:49.800
Anthony Taylor: What you guys want to do for the ta time. And again, these are all things. This is technically, this was y'all's first real working week.

108
00:08:49.870 --> 00:08:54.759
Anthony Taylor: the one you just finished. hey? The first week was just talk. Second week we worked.

109
00:08:55.210 --> 00:09:00.290
Anthony Taylor: Okay. So come to ta time with your question.

110
00:09:00.540 --> 00:09:05.890
Anthony Taylor: Even better put the question in the request.

111
00:09:06.470 --> 00:09:09.679
Anthony Taylor: So when you schedule it, I'm stuck on. Blah, blah, blah.

112
00:09:10.840 --> 00:09:15.500
Anthony Taylor: right? Ta gets the email. They know exactly what they're coming to to talk about. They're ready to go.

113
00:09:16.080 --> 00:09:19.509
Anthony Taylor: Okay. But yeah, you're right. It's hard if you haven't.

114
00:09:19.630 --> 00:09:23.420
Anthony Taylor: I mean, if if you're having trouble verbalizing what you need to do.

115
00:09:24.010 --> 00:09:30.930
Anthony Taylor: okay? And even though a lot of times, office hours is just random stuff.

116
00:09:31.430 --> 00:09:41.300
Anthony Taylor: If you guys come to office hours and you ask specific questions, I will give specific answers. I am only filling time with yes, because I don't like silence

117
00:09:41.530 --> 00:09:43.000
Anthony Taylor: if you haven't noticed.

118
00:09:44.250 --> 00:09:56.260
Anthony Taylor: Okay, I can't just sit here and stare at you guys. Not that it's not a wonderful shot. but I like to talk. Okay. Hi. any

119
00:09:56.680 --> 00:09:59.580
Anthony Taylor: other questions before about resources.

120
00:10:00.880 --> 00:10:05.439
Anthony Taylor: If it was easy, you guys, I'm gonna say something that Clayton said to me.

121
00:10:05.780 --> 00:10:18.059
Anthony Taylor: Clayton, I'm going to quote you. he said. Some about this is more work than a college class. I gotta tell you guys a boot camp should make your college classes look like kindergarten school.

122
00:10:19.570 --> 00:10:23.529
Anthony Taylor: Alright, we're not here to do a college class.

123
00:10:23.890 --> 00:10:34.300
Anthony Taylor: You signed up for a boot camp that is. 5 semesters of college costs rolled into 6 months.

124
00:10:36.270 --> 00:10:45.930
Anthony Taylor: Okay, and maybe even harder than that. From what I've been told, however. one last vote of encouragement, I have never had. Student

125
00:10:46.300 --> 00:10:49.619
Anthony Taylor: not pick this up at the time. I told you you would.

126
00:10:50.500 --> 00:10:53.449
Anthony Taylor: and not be spectacular at the end of the thing.

127
00:10:54.930 --> 00:10:56.200
Anthony Taylor: You know what. Hold up.

128
00:10:57.840 --> 00:10:59.470
Anthony Taylor: I want to see something real quick.

129
00:11:10.040 --> 00:11:11.980
Anthony Taylor: Darn it, maybe I'll find it

130
00:11:14.980 --> 00:11:15.910
class.

131
00:11:18.280 --> 00:11:30.210
Anthony Taylor: How you guys. if I can find it. Are you guys even mildly interested in seeing a graduating class doing their last presentation

132
00:11:30.450 --> 00:11:34.819
Anthony Taylor: takes about 10 min. Anybody interested in seeing that?

133
00:11:35.190 --> 00:11:36.070
Mcpherson, Michael: Sure.

134
00:11:36.590 --> 00:11:44.939
Meredith McCanse (she/her): Well, no science.

135
00:11:45.210 --> 00:11:48.640
Anthony Taylor: Oh, I see. Yeah. you're like, no.

136
00:11:48.910 --> 00:11:56.790
Baro, Sonja: no, no, I. My question is, will it get us behind in the content you want us to cover tonight? Of course it will, but we'll fix it.

137
00:11:57.390 --> 00:12:02.050
Anthony Taylor: I'm not gonna do it now, cause I can't find it. But I know I haven't.

138
00:12:02.320 --> 00:12:09.459
Anthony Taylor: I put it somewhere? Oh, I think I know where I'll find it. I'll get it, maybe after break or so. Yeah, let's see how we're doing on time.

139
00:12:09.580 --> 00:12:15.429
Anthony Taylor: Today's a pretty good data. Okay, as far as stuff to get done.

140
00:12:15.800 --> 00:12:19.350
Anthony Taylor: It's pretty good. I like it. So let's get started.

141
00:12:20.050 --> 00:12:22.109
Anthony Taylor: Yes, Rodney.

142
00:12:22.940 --> 00:12:36.629
Masarirambi, Rodney: Sorry. Just 2 questions. First of all, you mentioned that we should consider doing open AI and getting the Api key. Does that also?

143
00:12:36.830 --> 00:12:46.780
Masarirambi, Rodney: Should we actually like? I don't know if they've got an app. Should we also download the app and stuff like that as well? We just there's nothing to download for the key. So there's there's Chapter Dbt.

144
00:12:46.820 --> 00:12:51.850
Anthony Taylor: and then there's Openai. So remember, that's like saying, there's windows. And there's Microsoft.

145
00:12:54.090 --> 00:12:58.650
Anthony Taylor: Okay. So when you log in

146
00:12:59.370 --> 00:13:01.859
Anthony Taylor: to openai.com.

147
00:13:04.370 --> 00:13:06.990
Anthony Taylor: okay. you will

148
00:13:07.330 --> 00:13:10.600
Anthony Taylor: be allowed to sign in and get a key.

149
00:13:10.860 --> 00:13:15.070
Anthony Taylor: With that key we will be able to call Openai

150
00:13:15.150 --> 00:13:20.590
Anthony Taylor: and make our own Chatbots translators

151
00:13:20.900 --> 00:13:24.049
Anthony Taylor: whatever you want to make lots and lots of fun things.

152
00:13:24.210 --> 00:13:27.959
Anthony Taylor: Yeah, see, here's the Api. I have a bunch of

153
00:13:28.240 --> 00:13:36.429
Anthony Taylor:  yeah. So and these these do have a cost associated with them. It's not very much. I mean.

154
00:13:36.740 --> 00:13:40.420
Anthony Taylor: I put a limit on mine 20 bucks.

155
00:13:40.580 --> 00:13:43.949
Anthony Taylor: I've spent dollar 28 so far this month.

156
00:13:44.590 --> 00:13:49.780
Anthony Taylor: and you see how much I hit it just in this class. I've probably hit it 20 times.

157
00:13:50.920 --> 00:13:56.180
Anthony Taylor: So it's not very expensive. But for me to really teach you guys some cool stuff.

158
00:13:56.270 --> 00:14:09.819
Anthony Taylor: some extra reviews. I'm gonna not gonna be doing it till after first project. Cause you guys. I gotta get your heads caught up first. But after first project we'll start talking about doing extra reviews, and which time

159
00:14:10.140 --> 00:14:12.800
Anthony Taylor: I'm gonna teach you stuff that's not even in this class.

160
00:14:14.050 --> 00:14:15.560
Anthony Taylor: But is AI related.

161
00:14:16.300 --> 00:14:18.379
Anthony Taylor: Okay,

162
00:14:18.880 --> 00:14:21.510
Anthony Taylor: that's one of the things I offer. My students

163
00:14:22.330 --> 00:14:25.929
Anthony Taylor: also probably have a very nice gift for you after project one.

164
00:14:26.690 --> 00:14:28.960
Anthony Taylor: probably. I hope.

165
00:14:30.270 --> 00:14:32.710
Anthony Taylor: But don't sign up for it now, and let's just go to

166
00:14:32.970 --> 00:14:40.550
Anthony Taylor: what Clayton and Matt were talking about is Chat Gp. that is an application that uses open app.

167
00:14:40.970 --> 00:14:45.019
Anthony Taylor: and it's very, very cool, but you can't like connect to it

168
00:14:45.030 --> 00:14:49.589
Anthony Taylor: from from your own application. You have to have the Api team to do that.

169
00:14:50.400 --> 00:14:52.809
Anthony Taylor: Okay, it's a different different charge.

170
00:14:53.380 --> 00:14:56.240
Masarirambi, Rodney: and and that one's like 20 bucks.

171
00:14:57.810 --> 00:15:13.089
Masarirambi, Rodney: and and generally for them, the idea is that we should probably stay away from them until after the first project. Cause, you know, II mean, I'm I'm fine. It's perfectly okay. I mean, you're like here with just today.

172
00:15:14.870 --> 00:15:21.320
Anthony Taylor: I threw a code block into data bricks and I asked it to explain it.

173
00:15:21.450 --> 00:15:24.960
Anthony Taylor: Connecting to a salesforce, Api

174
00:15:25.450 --> 00:15:28.700
Anthony Taylor: and I asked it to build the structure for me.

175
00:15:29.280 --> 00:15:32.350
Anthony Taylor: because normally, I have to type all of this stuff.

176
00:15:33.050 --> 00:15:37.949
Anthony Taylor: Okay? And I hate it. So I have my assistant. I just go, hey.

177
00:15:37.980 --> 00:15:41.259
Anthony Taylor: here's the Json. Can you type this for me?

178
00:15:41.330 --> 00:15:43.669
Anthony Taylor: It typed it. It's not really code.

179
00:15:43.710 --> 00:15:50.369
Anthony Taylor: but sure help me out, man, I say, this took like 20 s it would have taken me an hour.

180
00:15:50.850 --> 00:15:53.090
Anthony Taylor: Google bigquery.

181
00:15:53.540 --> 00:15:58.829
Anthony Taylor: We II needed to know how to find the project like Google Big. So I use this every day.

182
00:15:59.840 --> 00:16:02.890
Anthony Taylor: Okay, every day all the time.

183
00:16:03.280 --> 00:16:07.369
Anthony Taylor:  chicken thigh recipe ideas.

184
00:16:07.710 --> 00:16:08.849
Anthony Taylor: Used it for that.

185
00:16:10.130 --> 00:16:12.139
Anthony Taylor: Yeah. So it's a lot of fun.

186
00:16:12.440 --> 00:16:19.710
Anthony Taylor:  yeah, so I don't. I don't. I'm not against it, but it is like 20 something bucks a month.

187
00:16:19.720 --> 00:16:21.039
Anthony Taylor: so it's not cheap.

188
00:16:21.220 --> 00:16:27.499
Anthony Taylor: But if you want to use it, use it. Just remember, if you use it in my class for homework.

189
00:16:27.910 --> 00:16:45.059
Anthony Taylor: you need to understand what it's telling you to do. Oh, this one's important. Everybody pay attention for a second. If it tells you to do something differently than what I told you to do and you use it. You will be marked on.

190
00:16:47.820 --> 00:16:53.820
Anthony Taylor: Okay. we intentionally don't always tell you every way to do something.

191
00:16:55.280 --> 00:16:58.129
Anthony Taylor: Okay, partly because remember, when I tell you about Boot Camp.

192
00:17:01.430 --> 00:17:03.490
Anthony Taylor: we always show you the hard way first.

193
00:17:04.180 --> 00:17:08.939
Anthony Taylor: So if we show you the hard way to do something, and then you do the homework, and you're doing it the easy way

194
00:17:09.700 --> 00:17:14.520
Anthony Taylor: you just jumped ahead and messed us up. Okay. Hi.

195
00:17:15.130 --> 00:17:19.390
Anthony Taylor: that wasn't so bad. 20 min. Okay, 5 min longer than I wanted to spend on it.

196
00:17:19.630 --> 00:17:21.400
Anthony Taylor: So here we go, you ready

197
00:17:23.369 --> 00:17:25.740
Anthony Taylor: functions.

198
00:17:28.770 --> 00:17:30.150
Anthony Taylor: I'm all winded now.

199
00:17:31.670 --> 00:17:33.129
Anthony Taylor: Everybody have a good weekend.

200
00:17:33.740 --> 00:17:34.470
Go ahead.

201
00:17:34.860 --> 00:17:36.300
Anthony Taylor: Functions.

202
00:17:37.160 --> 00:17:42.909
Anthony Taylor: What are functions? So first, we need to understand the importance of functions have we used functions yet

203
00:17:46.050 --> 00:17:50.159
Meredith McCanse (she/her): something else print it. Print is a function, isn't it? If

204
00:17:50.410 --> 00:17:52.340
Anthony Taylor: absolutely, Meredith.

205
00:17:53.150 --> 00:17:57.650
Anthony Taylor: I've been calling the methods that's correct also, but function methods. And

206
00:17:57.850 --> 00:18:01.089
Anthony Taylor: okay, we're gonna call in functions for today.

207
00:18:01.200 --> 00:18:03.339
Anthony Taylor: If you call it methods, you won't hurt my feelings.

208
00:18:04.260 --> 00:18:08.530
Anthony Taylor: Alright. but we're gonna understand the importance of, we've actually

209
00:18:08.640 --> 00:18:17.449
Anthony Taylor: a few of them. We're gonna create our own functions. We're gonna write our own functions, which is interesting because to me, creating and writing a function is the same thing.

210
00:18:17.700 --> 00:18:20.289
Anthony Taylor: And we're gonna use our own

211
00:18:20.360 --> 00:18:21.700
Anthony Taylor: functions.

212
00:18:23.710 --> 00:18:25.280
Anthony Taylor: Okay, very excited.

213
00:18:25.320 --> 00:18:33.779
Anthony Taylor: We're going to perform transformations on itable objects. Name 3 interval objects first, one

214
00:18:35.150 --> 00:18:44.740
Anthony Taylor: Dave name, one interval object in python list. Perfect curry. Give me another one.

215
00:18:46.320 --> 00:18:47.580
Gardner, Curry: Dictionaries

216
00:18:48.530 --> 00:18:51.779
Anthony Taylor: nice. It's gonna give me the last one

217
00:18:53.210 --> 00:18:55.200
Anthony Taylor: who's like, Oh, God, don't come.

218
00:18:55.370 --> 00:18:56.930
Anthony Taylor: Brandon, give me another one.

219
00:18:58.340 --> 00:18:59.740
Mckimmy, Brandon: Is that triple

220
00:19:00.320 --> 00:19:08.400
Anthony Taylor: love it all right, who has a weird one that doesn't look like an iterable object, but is an iterable object.

221
00:19:08.580 --> 00:19:15.470
Anthony Taylor: It's how we learn to do for loops of list comprehension. What is anybody, Matt?

222
00:19:16.730 --> 00:19:20.670
Anthony Taylor: A string, a string, Taftin, you bar.

223
00:19:21.780 --> 00:19:25.130
Anthony Taylor: Thank you, sir. A string is iterable?

224
00:19:25.770 --> 00:19:29.980
Anthony Taylor: Okay, what does interval mean? Means? You can loop through it. That's it

225
00:19:30.330 --> 00:19:33.489
Anthony Taylor: means python will naturally break it into parts

226
00:19:34.280 --> 00:19:35.910
Anthony Taylor: and loop through it.

227
00:19:35.940 --> 00:19:44.759
Anthony Taylor: Okay, alright. So we're gonna perform transformation on iterable objects using python built in functions.

228
00:19:46.180 --> 00:19:51.350
Anthony Taylor: And we're gonna learn about documenting code. This, if anything's gonna go by the wayside, it's gonna be this.

229
00:19:51.920 --> 00:19:54.879
Anthony Taylor: not that it's not good. But I'm gonna show you a really easy way.

230
00:19:55.910 --> 00:19:56.940
Anthony Taylor: Okay.

231
00:19:57.900 --> 00:20:02.910
Anthony Taylor: exciting are excited at all. Anyone even slightly nervous about learning functions.

232
00:20:03.040 --> 00:20:09.089
Anthony Taylor: Every time I say the word functions I want to say in Conjunction Junction. What's your function?

233
00:20:09.560 --> 00:20:12.330
Anthony Taylor: Anybody singing my head.

234
00:20:13.520 --> 00:20:17.429
Anthony Taylor: That's it. How many of you have no idea what I just, I was just talking

235
00:20:18.380 --> 00:20:26.029
Anthony Taylor: couple of you. Okay, cause that's actually what your function. It's it's yeah. Schoolhouse rock. It's old

236
00:20:26.640 --> 00:20:27.470
Anthony Taylor: sold

237
00:20:28.050 --> 00:20:39.100
Anthony Taylor: alright. So why use functions? Well, first reason we use functions is we don't want to repeat ourselves. This is something I have yet to learn. I'm very bad about feeding myself.

238
00:20:39.760 --> 00:20:42.359
Anthony Taylor: Okay, that's mostly because I forgot. I told you

239
00:20:43.540 --> 00:20:44.550
Anthony Taylor: alright.

240
00:20:44.850 --> 00:20:48.709
Anthony Taylor: But that is what we're doing. I use functions

241
00:20:48.930 --> 00:20:49.660
if

242
00:20:51.100 --> 00:20:53.680
Anthony Taylor: because I don't want to write the same code twice.

243
00:20:55.240 --> 00:21:09.060
Anthony Taylor: So once I write a function and I write it well. and it works. I save it. and I go back and get it when I need it again. When you guys saw my code the other day, those of you that saw my code when I was showing my work stuff.

244
00:21:09.160 --> 00:21:20.019
Anthony Taylor: You know, I showed you function, function, function, function, function. Why? Because they all work. And you know what every single developer at my work uses the same functions.

245
00:21:22.220 --> 00:21:24.730
Anthony Taylor: Okay. it's a whole library.

246
00:21:25.760 --> 00:21:28.359
Anthony Taylor:  the idea of it.

247
00:21:28.790 --> 00:21:31.420
Anthony Taylor: Don't repeat your code. Okay?

248
00:21:31.650 --> 00:21:37.839
Anthony Taylor: And some really practical reasons for this. If you repeat your code and you need to make a change to it.

249
00:21:38.140 --> 00:21:41.470
Anthony Taylor: That means you need to make a change to everywhere that code exists.

250
00:21:42.470 --> 00:21:49.120
Anthony Taylor: If you create a function, you change the function and it automatically changes it everywhere that code exists

251
00:21:49.610 --> 00:21:55.400
Anthony Taylor: or that function is used. Okay. so you're gonna see how that works? It's all good.

252
00:21:55.880 --> 00:21:59.870
Anthony Taylor:  so yeah, it helps with organization.

253
00:22:00.060 --> 00:22:11.449
Anthony Taylor: It just makes things cleaner and easier to read most of the time. Modularity allows us to take certain functionality and put it into like a single line of code.

254
00:22:11.590 --> 00:22:16.610
Anthony Taylor: even though it's a hundred lines of code and comprehension

255
00:22:16.630 --> 00:22:26.259
Anthony Taylor: if you got like really long processes, functions properly named and and created functions are really nice. Way to

256
00:22:26.960 --> 00:22:32.260
Anthony Taylor: read the code. Okay. questions about that

257
00:22:33.640 --> 00:22:39.300
Anthony Taylor: telling you guys today is so much easier than last week we used to fit this in the last week

258
00:22:40.130 --> 00:22:42.010
Anthony Taylor: we did. This was part of last.

259
00:22:42.400 --> 00:22:43.410
Anthony Taylor: not today.

260
00:22:45.810 --> 00:22:48.450
Anthony Taylor: So let's take a look at functions

261
00:22:48.470 --> 00:22:54.209
Anthony Taylor: here. I'll creek up. So, okay. so the basic

262
00:22:54.530 --> 00:23:00.260
Anthony Taylor: design. how the function is

263
00:23:02.580 --> 00:23:04.710
Anthony Taylor: so excited. Next week we start

264
00:23:05.420 --> 00:23:07.890
Anthony Taylor:  pandas.

265
00:23:08.570 --> 00:23:10.189
Anthony Taylor: Anybody like pandas

266
00:23:13.460 --> 00:23:16.380
Anthony Taylor: and those okay.

267
00:23:16.700 --> 00:23:21.709
Anthony Taylor: So I mean, we've used functions as Meredith pointed out, print

268
00:23:22.240 --> 00:23:25.849
Anthony Taylor: is a function and actually kind of interestingly, I have my

269
00:23:26.180 --> 00:23:30.989
Anthony Taylor: by stuff up here. and you can see it's telling us what's in this function

270
00:23:31.680 --> 00:23:40.009
Anthony Taylor: and all this kind of stuff. So a properly documented function will do that, but we can print. Hello! Don't hit. Enter there

271
00:23:40.160 --> 00:23:43.290
Anthony Taylor: and hit shift enter. and

272
00:23:47.650 --> 00:23:48.820
Anthony Taylor: it's connecting

273
00:23:49.510 --> 00:23:54.079
Anthony Taylor: so slowly. There it goes, and it'll print. Hello! This is a function.

274
00:23:54.720 --> 00:24:00.560
Anthony Taylor: Now, if we went and looked up what it took to do this, you guys would be surprised to hear that this is probably

275
00:24:00.600 --> 00:24:02.529
Anthony Taylor: 500 lines of code.

276
00:24:04.780 --> 00:24:12.429
Anthony Taylor: Okay, I don't know if that's really true. Where's a lot of code? You can actually, because Python is open source.

277
00:24:13.760 --> 00:24:15.840
Anthony Taylor: Okay,

278
00:24:16.080 --> 00:24:23.040
Anthony Taylor: so you could go and find exactly how many lines of code it took to print that word, Hello.

279
00:24:24.430 --> 00:24:28.389
Anthony Taylor: okay. We've done other ones, some some of those right?

280
00:24:28.530 --> 00:24:30.220
Anthony Taylor: What's some other ones? We've done

281
00:24:35.120 --> 00:24:36.060
Anthony Taylor: anybody

282
00:24:37.050 --> 00:24:38.780
Derek Rikke: lower.

283
00:24:40.970 --> 00:24:43.970
Anthony Taylor: lower, upper, absolutely length.

284
00:24:44.330 --> 00:24:46.920
Anthony Taylor: Min, Max, right.

285
00:24:48.110 --> 00:24:50.520
Anthony Taylor: What's another one, Meredith? I saw you on mute.

286
00:24:50.990 --> 00:24:56.849
Meredith McCanse (she/her): What about the I. Maybe it's not. But I'm thinking about the parentheses like when you do the things where you

287
00:24:57.120 --> 00:25:03.810
Meredith McCanse (she/her): I think it's probably not where you do like values, and then excuse me like, call the values and do it in a for loop

288
00:25:03.920 --> 00:25:07.949
Meredith McCanse (she/her): is that part of it, or like, if you can do like value items, or

289
00:25:08.520 --> 00:25:11.490
Anthony Taylor: you can well, like items and keys.

290
00:25:11.560 --> 00:25:12.690
Anthony Taylor: Those are

291
00:25:12.930 --> 00:25:16.099
Anthony Taylor: pop and pen. Those are

292
00:25:16.140 --> 00:25:22.949
Anthony Taylor: there. There's some things that are in parentheses that aren't functions. But typically a function will be a word followed by

293
00:25:23.060 --> 00:25:29.880
Anthony Taylor: Brent princesses. Alright. So now that we know that it's a word followed by a parenthesi, let's make our.

294
00:25:30.170 --> 00:25:43.509
Anthony Taylor: So let's do define. Ef that's telling Python what I'm about to do is going to be a function. and then the name of our function. We'll call this one Hello.

295
00:25:45.550 --> 00:25:51.960
Anthony Taylor: that's it. And we're gonna do a cold. No, we're not gonna do it cold. We're going to do.

296
00:25:52.340 --> 00:26:01.449
Anthony Taylor: We need to. We need to do something to tell it that it's a function, or if it has any arguments which we'll get to. So we'll put open close parentheses.

297
00:26:01.710 --> 00:26:03.140
Anthony Taylor: Vertical.

298
00:26:05.000 --> 00:26:05.720
Okay?

299
00:26:07.080 --> 00:26:13.119
Anthony Taylor: And now hit, enter, notice, it's indented. Everything that is indented from here

300
00:26:13.400 --> 00:26:19.490
Anthony Taylor: will be the body of our function. So all I want this function to do is print. Hello.

301
00:26:20.180 --> 00:26:24.269
Anthony Taylor: so I'm going to call a function within my function

302
00:26:24.350 --> 00:26:26.719
Anthony Taylor: and tell it to print. Hello.

303
00:26:31.780 --> 00:26:37.480
Anthony Taylor: shift! Enter now, have created a function called, Hello!

304
00:26:38.770 --> 00:26:42.239
Anthony Taylor: How do we call it? Well, type. Hello.

305
00:26:42.250 --> 00:26:44.300
Anthony Taylor: open close parentheses

306
00:26:44.540 --> 00:26:46.219
Anthony Taylor: and hit run.

307
00:26:48.810 --> 00:26:50.600
Anthony Taylor: We have called our first function.

308
00:26:51.790 --> 00:26:57.630
Anthony Taylor: Now I know it seems kind of silly that we created a function that only executes one line of code.

309
00:26:58.040 --> 00:27:07.550
Anthony Taylor: but it serves its purpose. So function. Design is actually, there's 3 pieces. There's defining the function.

310
00:27:08.560 --> 00:27:14.180
Anthony Taylor: There's the body of the function. and there's calling the function. Yes, Clayton.

311
00:27:16.710 --> 00:27:22.399
Clayton Graves: can you then use that function and put parameters within the parentheses to like. Say.

312
00:27:23.840 --> 00:27:26.520
Clayton Graves: Hello, Clay, or something like that.

313
00:27:26.540 --> 00:27:33.780
Anthony Taylor: You know what I love that. Let's do it. Let's just make. And we're gonna jump ahead a little bit. But that's okay. So let's put in

314
00:27:34.670 --> 00:27:39.850
Anthony Taylor: person. We'll just call it. It's a variable. It's an argument.

315
00:27:40.650 --> 00:27:45.300
Anthony Taylor: Okay? And then here, I'm going to make this an F string.

316
00:27:45.870 --> 00:27:50.260
Anthony Taylor: and then I'm gonna put person inside of there.

317
00:27:51.060 --> 00:28:00.070
Anthony Taylor: So now, when I run this, if I just say hello, it's actually gonna give me a fail. Why? Because there's an argument here, and I didn't pass one in.

318
00:28:00.610 --> 00:28:04.130
Anthony Taylor: so I can come in here and say, Clayton.

319
00:28:05.220 --> 00:28:15.300
Anthony Taylor: and run that, and it will say, Hello, plate. Now we're going to learn a lot more about arguments later. Right now, I'm mostly interested that, you understand. Define a function.

320
00:28:15.790 --> 00:28:21.270
Anthony Taylor: The body of a function can be 1, 2 hundreds of lines of code.

321
00:28:22.520 --> 00:28:23.600
Anthony Taylor: Okay?

322
00:28:23.710 --> 00:28:25.900
Anthony Taylor: And how to call

323
00:28:25.960 --> 00:28:27.000
Anthony Taylor: a function.

324
00:28:28.300 --> 00:28:29.130
Anthony Taylor: Okay?

325
00:28:30.110 --> 00:28:35.490
Anthony Taylor: Alright. So another example. Let's do this one. Let's do define. And we'll do screaming with.

326
00:28:37.170 --> 00:28:40.370
Anthony Taylor: Okay. and all we're gonna do is print.

327
00:28:43.150 --> 00:28:44.330
And

328
00:28:45.130 --> 00:28:46.060
Anthony Taylor: alright.

329
00:28:47.270 --> 00:28:52.050
Anthony Taylor: and I'm gonna run that. And then down here I wanna type screen

330
00:28:52.780 --> 00:28:53.980
Anthony Taylor: screen

331
00:28:55.580 --> 00:28:58.310
Anthony Taylor: and notice it calls the function twice.

332
00:28:58.970 --> 00:29:03.810
Anthony Taylor: Okay. So oh, I saw a hand, heard a hand go up. Where to go.

333
00:29:04.900 --> 00:29:06.089
Anthony Taylor: Tanya, what was.

334
00:29:09.860 --> 00:29:15.460
Anthony Taylor: So the first block, you said, Okay, we're defining the function right?

335
00:29:15.770 --> 00:29:20.850
Baro, Sonja: And then the second was the body of the function

336
00:29:21.220 --> 00:29:39.870
Baro, Sonja: correct. And then the third box, or bright, or code is the execution or the calling of it? Right? Define? Hello, person up top.

337
00:29:40.150 --> 00:29:43.369
Baro, Sonja: right? That's defining it.

338
00:29:43.860 --> 00:29:49.420
Baro, Sonja: And and then why is the print, not? Then the body.

339
00:29:49.970 --> 00:29:51.829
Anthony Taylor: It is. This is the body.

340
00:29:51.960 --> 00:29:57.860
Baro, Sonja: Oh, okay, and then the whole. This is exactly the same. This is, we added an argument. That's all.

341
00:29:58.900 --> 00:30:14.400
Baro, Sonja: Okay. And then the Hello, Clayton, when you use the term that you defined to be the function. It's literally just by saying that. Sorry about my, I figured out all the

342
00:30:14.820 --> 00:30:18.480
Baro, Sonja: okay. So you guys don't slow me down. I'm just gonna keep going

343
00:30:19.420 --> 00:30:20.989
Anthony Taylor: right. So go ahead

344
00:30:21.030 --> 00:30:27.940
Baro, Sonja: because it you've defined. Hello! When you ran Hello! Or you called Hello!

345
00:30:28.700 --> 00:30:30.570
Baro, Sonja: You told it? God!

346
00:30:31.430 --> 00:30:39.820
Anthony Taylor: What to put in. Is that? Not that sorry? I'm no, no, no, that's good. No, that's perfect. So when we call Hello.

347
00:30:40.110 --> 00:30:43.939
Anthony Taylor: right, it's gonna run whatever is in the body of this function.

348
00:30:44.550 --> 00:30:50.120
Anthony Taylor: Okay? And in this case we threw it. In fact, let's just give you the argument, for now we're going to come back to the arguments leave?

349
00:30:50.520 --> 00:30:55.339
Anthony Taylor: Okay? So we we say, Hello, parentheses.

350
00:30:55.830 --> 00:31:00.190
Anthony Taylor: That tells Python, I want you to go to this definition

351
00:31:00.720 --> 00:31:04.959
Anthony Taylor: and run whatever is inside of underneath in this bottle.

352
00:31:05.380 --> 00:31:07.759
Anthony Taylor: Okay? So when we call Hello.

353
00:31:07.830 --> 00:31:09.920
Anthony Taylor: I think it pretty clean. Sorry, clean

354
00:31:10.830 --> 00:31:14.599
Anthony Taylor: when we call it here. It's just gonna call this

355
00:31:15.390 --> 00:31:22.870
Anthony Taylor: right? Keep in mind functions, get much larger than this. Yeah. But this is just our first exposure.

356
00:31:23.860 --> 00:31:24.590
Baro, Sonja: Okay.

357
00:31:24.820 --> 00:31:26.710
Anthony Taylor: okay, is that cool?

358
00:31:27.070 --> 00:31:28.370
Baro, Sonja: Yes, thank you.

359
00:31:28.820 --> 00:31:30.210
Anthony Taylor: You're very welcome.

360
00:31:31.110 --> 00:31:40.279
Anthony Taylor: I will. I do want to show you guys not our notebook. And it's all wonderful. Okay, I do want to show you guys this, we'll be seeing this

361
00:31:40.460 --> 00:31:41.569
Anthony Taylor: a lot

362
00:31:41.850 --> 00:31:49.170
Anthony Taylor:  in the py files. And I don't want you to stress about it. Oh, that's funny. I took it out.

363
00:31:52.560 --> 00:31:53.710
Anthony Taylor: I'll put it back in.

364
00:32:05.460 --> 00:32:07.340
Anthony Taylor: Okay,

365
00:32:08.200 --> 00:32:10.110
Anthony Taylor: So in the py files

366
00:32:10.250 --> 00:32:14.530
Anthony Taylor: you will see this, if name equals name.

367
00:32:14.970 --> 00:32:20.699
Anthony Taylor: Okay, to run the python files by themselves. You you want this.

368
00:32:20.860 --> 00:32:28.570
Anthony Taylor: All this does. I just want to make it clear. If you run a python file with python

369
00:32:30.110 --> 00:32:31.370
Anthony Taylor: by itself.

370
00:32:31.810 --> 00:32:36.559
Anthony Taylor: It is called name. The name of it is, it's automatically called

371
00:32:36.730 --> 00:32:46.650
Anthony Taylor: Maine. So what this does is if you are calling this python file by itself. It will run these functions.

372
00:32:47.700 --> 00:32:52.509
Anthony Taylor: If you are calling it from another python file, it will not run.

373
00:32:52.560 --> 00:32:54.799
Anthony Taylor: Please function that make sense.

374
00:32:56.680 --> 00:33:00.380
Anthony Taylor: Okay, I just wanted to show it to you, even though we're not gonna do this.

375
00:33:00.500 --> 00:33:09.209
Anthony Taylor: It's because I give you both the pie and the notebook. I just want you to know that's what that is. And, by the way, if you run this in the notebook, it works fine.

376
00:33:10.550 --> 00:33:16.560
Anthony Taylor: so don't worry if you see it. And you're like, Oh, my God, no, don't worry. Okay. Hi.

377
00:33:17.880 --> 00:33:21.579
Anthony Taylor: Questions about functions before you start your own function.

378
00:33:21.900 --> 00:33:23.789
Anthony Taylor: Trust me. It's not bad.

379
00:33:25.000 --> 00:33:30.320
Anthony Taylor: I don't get the purpose of that. If

380
00:33:30.580 --> 00:33:33.470
Clayton Graves: name equals main, is that to prevent it from

381
00:33:33.480 --> 00:33:37.619
Clayton Graves: executing automatically if it's called in another process?

382
00:33:38.190 --> 00:33:39.110
Anthony Taylor: Exactly.

383
00:33:39.970 --> 00:33:46.339
Anthony Taylor: Okay, yeah. So so main by itself, means, I am calling you. I'm calling this file directly.

384
00:33:46.860 --> 00:33:49.450
Anthony Taylor: I'm accidentally showing you guys the solution.

385
00:33:49.880 --> 00:33:53.400
Anthony Taylor: It means I'm calling this file directly

386
00:33:53.490 --> 00:33:55.169
Anthony Taylor: and execute this.

387
00:33:55.390 --> 00:33:58.959
Anthony Taylor: If if you, what you'll find is python is really

388
00:34:00.410 --> 00:34:04.960
Anthony Taylor: modular. we're going to talk about object-oriented programming later.

389
00:34:05.040 --> 00:34:12.290
Anthony Taylor: But it's modular. So we build all of the libraries, you know, when we do the imports. Have we talked about imports yet?

390
00:34:13.659 --> 00:34:14.860
Anthony Taylor: Not really. Huh?

391
00:34:15.360 --> 00:34:25.029
Anthony Taylor: Did we? A little bit. Well, when we get into imports, you're gonna find out the imports are nothing more than code. Somebody else wrote that we're gonna bring into our code

392
00:34:25.400 --> 00:34:26.749
Anthony Taylor: can call functions

393
00:34:27.469 --> 00:34:30.089
Anthony Taylor: from their import from their code.

394
00:34:30.550 --> 00:34:31.510
Anthony Taylor: So

395
00:34:31.630 --> 00:34:34.589
Anthony Taylor: that is a python file calling a python file.

396
00:34:35.780 --> 00:34:42.929
Anthony Taylor: Okay, so you have to be aware of that. But you, not for what we're doing. Okay, we're we're gonna do it all notebooks, anyway. So you're okay.

397
00:34:43.400 --> 00:34:44.840
Anthony Taylor: Okay.

398
00:34:44.870 --> 00:34:50.969
Anthony Taylor: so here's your notebook. You're going to create a function that prints 2 messages. First message should state the cost

399
00:34:51.100 --> 00:35:01.469
Anthony Taylor: of a transaction, the second should state that the payment has been processed. Note, they gave you this, though, this means they want you to name the function process payment

400
00:35:02.140 --> 00:35:07.479
Anthony Taylor: gonna print 2 lines, guys. This is 10 min, all right.

401
00:35:08.510 --> 00:35:17.270
Masarirambi, Rodney: Sure. So so we think we got it. But you know, we we went over to see like

402
00:35:17.290 --> 00:35:23.509
Masarirambi, Rodney: whether we like full everything. And it looks like we fulfilled all the objective

403
00:35:24.380 --> 00:35:25.730
Masarirambi, Rodney: Tanya's gonna take over.

404
00:35:27.680 --> 00:35:31.880
Masarirambi, Rodney: I didn't. I didn't type anything out. Who did it?

405
00:35:33.140 --> 00:35:35.380
Anthony Taylor: Who who did it on your team? Tanya.

406
00:35:35.430 --> 00:35:42.030
Anthony Taylor: am I? My screen is sharing. Yes. Yup.

407
00:35:42.210 --> 00:35:43.130
Raugewitz, Tania: okay.

408
00:35:43.690 --> 00:35:45.030
so

409
00:35:45.910 --> 00:35:48.410
Raugewitz, Tania: this is our defined

410
00:35:48.470 --> 00:35:52.330
Anthony Taylor: process payment. That's freaking beautiful. You're done. Oh.

411
00:35:53.000 --> 00:35:57.379
Anthony Taylor: you didn't need 2, if name equals name. But that's okay.

412
00:35:58.470 --> 00:36:02.879
Masarirambi, Rodney: we were. We were starting to do more. And then.

413
00:36:03.580 --> 00:36:09.429
Anthony Taylor: that's all right. That's it, guys. That's the whole thing. Everybody see, it can highlight your function for everybody timing.

414
00:36:09.750 --> 00:36:12.889
Raugewitz, Tania: Show us the definition. I like the definition.

415
00:36:13.960 --> 00:36:15.910
Anthony Taylor: perfect highlight, the bog.

416
00:36:16.530 --> 00:36:17.930
Raugewitz, Tania: This is the body

417
00:36:18.530 --> 00:36:20.589
Anthony Taylor: correct. And oh.

418
00:36:22.580 --> 00:36:25.789
Anthony Taylor: well, technically, it's the the code in there. That's the output.

419
00:36:26.340 --> 00:36:32.579
Anthony Taylor: But yes, so everybody get it. There you go. Thank you. And that's the out

420
00:36:33.970 --> 00:36:40.910
Anthony Taylor: questions. I think I over complicated the instruct. Yes, Clayton, that is possible. But I didn't see it.

421
00:36:41.510 --> 00:36:44.469
Anthony Taylor: But yeah, I told you guys, today's not so bad.

422
00:36:44.790 --> 00:36:52.459
Anthony Taylor: It is not so bad. We are going to get some pretty crazy concepts for the days over. But at least the first part of today is not so bad.

423
00:36:53.080 --> 00:36:58.330
Anthony Taylor: Okay. all right, let's go back to our slide boop, broop.

424
00:37:01.360 --> 00:37:03.870
Anthony Taylor: Yeah, see, there's same thing we just talked about.

425
00:37:05.280 --> 00:37:07.390
Okay. okay.

426
00:37:07.510 --> 00:37:08.830
Anthony Taylor: And

427
00:37:11.070 --> 00:37:30.559
Masarirambi, Rodney: so 1 one thing that I like about this is that like, when I tried learning programming through other things like it was always like, Start off with like, Oh, what's a variable? And then and then it's like, Oh, yeah. Now, you gotta do this. And the one thing that like about doing it the other way that you did it was that like, now that we're coming onto the functions like, yeah, we're we already know what

428
00:37:31.460 --> 00:37:40.169
Masarirambi, Rodney: we already know, what the functions are and what they're gonna do. And it's not like, you know. Now we're building our own. So it's like, II like that. That reversal. I think

429
00:37:40.710 --> 00:37:43.969
Anthony Taylor: I like that, Rodney. I will take that feedback to the Council

430
00:37:44.430 --> 00:37:46.839
Anthony Taylor: to the council.

431
00:37:47.190 --> 00:37:49.630
Baro, Sonja:  thank you.

432
00:37:49.900 --> 00:37:55.010
Anthony Taylor: Yeah, I love that. Alright. So let's talk about

433
00:37:55.080 --> 00:38:03.249
Anthony Taylor: variables and parameters. Okay, we did. Clinton kind of introduces to this second or too early. That's alright

434
00:38:03.440 --> 00:38:07.820
Anthony Taylor: before. Actually, they're gonna take us down kind of interesting path.

435
00:38:08.060 --> 00:38:10.240
Anthony Taylor:  and I'm

436
00:38:10.650 --> 00:38:22.790
Anthony Taylor: I'm only gonna talk about this one. Then we're gonna jump in the code. So I want you to understand. Scope at a very high level right now.

437
00:38:24.660 --> 00:38:26.889
Anthony Taylor: And let me give you an example of why.

438
00:38:28.490 --> 00:38:29.380
Anthony Taylor: Curry.

439
00:38:30.480 --> 00:38:32.049
Anthony Taylor: do you understand? Scope?

440
00:38:33.830 --> 00:38:35.010
Gardner, Curry: I do. Yes.

441
00:38:35.580 --> 00:38:37.139
Anthony Taylor: okay, Matt.

442
00:38:37.770 --> 00:38:40.249
Anthony Taylor: Do you know scope when it comes to programming?

443
00:38:42.110 --> 00:38:53.210
Anthony Taylor: Alright, Gabe, I bet I would assume you do. Yeah, okay. Now, you guys know why? I asked them clearly. They've shown that they have unhappy. How are you with scope?

444
00:38:54.310 --> 00:39:03.920
Anthony Taylor: Okay, so we've got some people that have had some previous experience. But and I know Derek, too, and all of that right. So scope is not something that is

445
00:39:04.770 --> 00:39:13.840
Anthony Taylor: natural. Alright. But you, I want you to be aware of it. So that's all I wanna say about it. And then we're gonna someone. Show it to you.

446
00:39:14.200 --> 00:39:17.829
Anthony Taylor:  but it refers to.

447
00:39:19.090 --> 00:39:21.439
Anthony Taylor: We're when we create a variable.

448
00:39:21.900 --> 00:39:24.159
Anthony Taylor: it is accessible

449
00:39:25.140 --> 00:39:27.589
Anthony Taylor: at a certain level of your code.

450
00:39:28.770 --> 00:39:29.760
Anthony Taylor: Okay.

451
00:39:30.230 --> 00:39:36.470
Anthony Taylor: so a variable that is in a function is in the scope of the function.

452
00:39:36.830 --> 00:39:42.310
Anthony Taylor: You cannot call it that variable from another function.

453
00:39:43.170 --> 00:39:49.079
Anthony Taylor: Does that make sense to anybody? I'm gonna show this to you. but I just want you to understand that

454
00:39:51.190 --> 00:39:56.329
Anthony Taylor: scope is something in Python that we need to be aware of.

455
00:39:56.910 --> 00:40:04.709
Anthony Taylor: It rarely will bite you. If you're pretty good about it, or when you run into it, you should identify it immediately.

456
00:40:06.000 --> 00:40:07.219
Anthony Taylor: All right. Yeah, click.

457
00:40:08.200 --> 00:40:09.540
Clayton Graves: So is it kind of like.

458
00:40:10.120 --> 00:40:15.309
Clayton Graves: conceptually like like a like a folder. That's only accessible to me

459
00:40:16.020 --> 00:40:19.090
Clayton Graves: versus a folder that would be shareable to everybody.

460
00:40:19.540 --> 00:40:22.630
Anthony Taylor: Yeah, kinda yeah, that's not a bad example.

461
00:40:22.720 --> 00:40:28.520
Anthony Taylor:  yeah, yeah, I mean, or it's like I slack. If I slack

462
00:40:28.680 --> 00:40:35.540
Anthony Taylor: view a message right now it it is in the scope of you and my conversation. and Meredith can't see it.

463
00:40:35.650 --> 00:40:47.869
Anthony Taylor: But if I slap you a message in general channel, it's global. Everybody can see it. Okay, that is scope, even though that's much simplified from programming. But

464
00:40:48.370 --> 00:40:51.860
Anthony Taylor: let me show you. okay, I have a very good example.

465
00:40:56.630 --> 00:40:57.430
Anthony Taylor: Okay.

466
00:40:57.630 --> 00:40:59.939
Anthony Taylor: so here.

467
00:41:00.970 --> 00:41:03.299
Anthony Taylor: I have this pool function.

468
00:41:04.400 --> 00:41:14.830
Anthony Taylor: and it's called, add. and it takes all right. We have this first number variable. the second number variable, and we're going to add them 2 together.

469
00:41:15.430 --> 00:41:19.280
Anthony Taylor:  and I'm going to

470
00:41:19.470 --> 00:41:20.540
Anthony Taylor: run this.

471
00:41:25.620 --> 00:41:27.669
Anthony Taylor: Okay? And now I'm going to call it.

472
00:41:27.900 --> 00:41:29.779
Anthony Taylor: And what do we expect? The answer is going to be

473
00:41:33.540 --> 00:41:36.900
Anthony Taylor: 2, well. one and 2.

474
00:41:36.920 --> 00:41:38.600
Meredith McCanse (she/her): So 3, 3,

475
00:41:39.280 --> 00:41:42.829
Anthony Taylor: yeah. And then we got an error cause we said, print

476
00:41:42.940 --> 00:41:44.010
Anthony Taylor: first, number.

477
00:41:45.300 --> 00:41:57.209
Anthony Taylor: okay. Now, the reason we got that error is, look where first number is first number is inside dysfunction. So it's scope

478
00:41:57.400 --> 00:42:08.289
Anthony Taylor: is limited to this function. So it does not exist at this point in our code. And it even says, first number is not defined.

479
00:42:09.520 --> 00:42:10.310
Anthony Taylor: Okay.

480
00:42:10.620 --> 00:42:15.169
Anthony Taylor: so let's go down a little further. Let's define first number and second number.

481
00:42:18.610 --> 00:42:24.570
Anthony Taylor: and we're gonna define the same function as up above, except we're gonna call it additions, time.

482
00:42:25.940 --> 00:42:29.059
Anthony Taylor: alright question of the hour.

483
00:42:29.420 --> 00:42:31.550
Anthony Taylor: What is the answer going to be?

484
00:42:35.720 --> 00:42:39.209
Anthony Taylor: What's going to come out of addition. What's this answer going to be?

485
00:42:41.520 --> 00:42:45.650
Anthony Taylor: Curry says 3. Derek says 3. What did you say?

486
00:42:45.900 --> 00:42:48.429
Clayton Graves: 8. Is it going to add them all together

487
00:42:49.850 --> 00:42:50.760
Anthony Taylor: now

488
00:42:55.790 --> 00:43:00.069
Clayton Graves: and then it is it just overwriting them? Then

489
00:43:00.080 --> 00:43:07.139
Anthony Taylor: remember the scope. These variables are out here, so they're open to everybody in the snow.

490
00:43:08.180 --> 00:43:16.350
Anthony Taylor: Okay, but these variables are in the scope of this function. So they don't see these guys.

491
00:43:17.840 --> 00:43:19.670
Anthony Taylor: They only see each other

492
00:43:21.520 --> 00:43:33.770
Anthony Taylor: alright. So when we run this, then we run. This guy addition is gonna return tree. And then this one down here is going to give us a little more information. The global variable

493
00:43:34.100 --> 00:43:46.670
Anthony Taylor: first number and second number are 2 and 3. Okay, but the values within the scope of the function. Okay, now. this is a terrible practice.

494
00:43:48.350 --> 00:43:54.599
Anthony Taylor: Never use variables as global variables that you are also using in a function.

495
00:43:54.720 --> 00:43:55.680
Anthony Taylor: It's lame.

496
00:43:56.600 --> 00:43:59.629
Anthony Taylor: All right. Don't do that first question, Sonya.

497
00:44:01.350 --> 00:44:20.610
Baro, Sonja: So when we've had other global variables, variables referenced. They always came first. I thought like so if there wasn't. if you if you had a variable within something. But yet there was a global, it would pick up the global, didn't it?

498
00:44:20.900 --> 00:44:22.700
Anthony Taylor: Well, if you passed it in

499
00:44:22.990 --> 00:44:25.990
Anthony Taylor: and we're gonna show you that next. But that's a good question.

500
00:44:27.110 --> 00:44:28.399
Anthony Taylor: Any other question.

501
00:44:29.880 --> 00:44:31.320
Anthony Taylor: Yes, Tanya.

502
00:44:35.320 --> 00:44:41.959
Raugewitz, Tania: so why does it? How does it know that this is a number and and not a string?

503
00:44:42.870 --> 00:44:44.820
Anthony Taylor: Well, cause that's what we passed into.

504
00:44:45.200 --> 00:44:45.950
Okay.

505
00:44:46.730 --> 00:44:50.399
Anthony Taylor: yeah, see if there were quotes around this, we'd have to convert it to an integer.

506
00:44:50.820 --> 00:44:53.570
Raugewitz, Tania: So by default, it it knows it's a number

507
00:44:54.210 --> 00:44:57.240
Anthony Taylor: exactly because Python is not a tight

508
00:44:57.300 --> 00:45:03.179
Raugewitz, Tania: scripting language. So, in other words, whatever you pass in is what this becomes

509
00:45:04.570 --> 00:45:05.630
Anthony Taylor: great question.

510
00:45:06.260 --> 00:45:12.940
Anthony Taylor: Alright. So let's look at arguments for a second. So this goes back to what Clayton was talking about. So here we have

511
00:45:12.990 --> 00:45:20.800
Anthony Taylor: a function. We defined it. But in the parentheses we put 2 variables. These could be Bob and Sue.

512
00:45:21.880 --> 00:45:25.610
Anthony Taylor: Okay, it could be anything you want them to be, whatever you're comfortable with.

513
00:45:27.440 --> 00:45:36.980
Anthony Taylor: Alright, we have a comment. This this is something we're gonna learn about later. But as we'll tell you about it now, basically, we're saying, this is what this function does.

514
00:45:37.730 --> 00:45:44.290
Anthony Taylor: Just a comment. Okay, and there's a good reason for doing this. I'll show you. This is what we're gonna do.

515
00:45:44.510 --> 00:45:47.370
Anthony Taylor: We're going to add these 2 values together

516
00:45:47.520 --> 00:45:49.709
Anthony Taylor: and put them in a variable called total.

517
00:45:50.890 --> 00:45:54.250
Anthony Taylor: And then this one is going to print the total.

518
00:45:55.350 --> 00:45:57.080
Anthony Taylor: Okay, so we can run that

519
00:45:58.560 --> 00:46:00.700
Anthony Taylor: I'm gonna get rid of this main. For now.

520
00:46:01.940 --> 00:46:05.330
Anthony Taylor: you don't have to get rid of that mean, I'm just doing it to keep my screen clean.

521
00:46:05.900 --> 00:46:13.100
Anthony Taylor: Okay? So our function is created and we're passing into numbers comes out perfect. What if I passed in string?

522
00:46:15.330 --> 00:46:16.520
Anthony Taylor: Is this gonna work?

523
00:46:20.000 --> 00:46:23.189
Anthony Taylor: Clayton is correct. It will fail.

524
00:46:23.640 --> 00:46:26.070
Anthony Taylor: Okay, now, we could fix that

525
00:46:26.860 --> 00:46:31.190
Anthony Taylor: a lot of ways, and I'll show you different ways to do that later. Okay.

526
00:46:31.560 --> 00:46:35.109
Anthony Taylor: alright. So here's another way to pass in

527
00:46:35.250 --> 00:46:38.379
Anthony Taylor: variables. Variables can be passed in

528
00:46:38.500 --> 00:46:40.970
Anthony Taylor: by literally typing.

529
00:46:42.360 --> 00:46:44.900
Anthony Taylor: y equals 12

530
00:46:44.910 --> 00:46:48.260
Anthony Taylor: comma x equals 5.

531
00:46:48.920 --> 00:46:52.840
Anthony Taylor: Notice that's opposite the order they went in. This will work.

532
00:46:54.210 --> 00:46:55.130
Anthony Taylor: Okay?

533
00:46:55.470 --> 00:47:01.839
Anthony Taylor:  Here we have 3 variables that we're passing into our savings function.

534
00:47:03.400 --> 00:47:08.440
Anthony Taylor: Our savings function is going to take the Apr. Divided by a fund.

535
00:47:08.850 --> 00:47:14.689
Anthony Taylor: the days divided by 365, and then multiply them together to give us an interest rate.

536
00:47:15.640 --> 00:47:22.700
Anthony Taylor: Our interest earn will be our balance times, our interest rate, and then we're going to add our interest earn to our balance.

537
00:47:23.260 --> 00:47:25.830
Anthony Taylor: Does everybody agree that that's what this code is doing.

538
00:47:27.900 --> 00:47:33.549
Anthony Taylor: Okay? So we run this function. Now, our function's getting a little more complicated. Do you agree?

539
00:47:34.360 --> 00:47:38.109
Anthony Taylor: Alright? And then here we're passing in

540
00:47:38.860 --> 00:47:40.180
Anthony Taylor: 3 votes.

541
00:47:43.110 --> 00:47:47.730
Anthony Taylor: 5, 31, 50,000.

542
00:47:49.700 --> 00:47:52.109
Anthony Taylor: Our balance is 200. So did that look right?

543
00:47:53.810 --> 00:48:05.430
Anthony Taylor: Probably not. I mean, yes, it is correct. But this order is probably wrong. This is a positional because we are not putting the variable name here.

544
00:48:05.860 --> 00:48:09.660
Anthony Taylor: You want to pass them in the position that they

545
00:48:10.590 --> 00:48:13.910
Anthony Taylor: are listed. So in this second example.

546
00:48:16.620 --> 00:48:22.659
Anthony Taylor: we're passing it. 50,000 is the balance. 3 Apr. 31 days.

547
00:48:23.070 --> 00:48:25.659
Anthony Taylor: There's the new balance

548
00:48:26.470 --> 00:48:32.209
Anthony Taylor: now. Yeah, again, you could pass them in if you did them in the if you type the variable name.

549
00:48:32.430 --> 00:48:34.969
Anthony Taylor: So if I said, Apr equals

550
00:48:36.560 --> 00:48:39.870
Anthony Taylor: days. equals

551
00:48:41.480 --> 00:48:45.090
Anthony Taylor: and balance equals.

552
00:48:45.100 --> 00:48:51.130
Anthony Taylor: We can uncommon this. and even though they're in a different order, you'll get the same result

553
00:48:51.580 --> 00:48:55.900
Anthony Taylor: that makes sense to everybody. So so far we've learned

554
00:48:56.260 --> 00:49:01.990
Anthony Taylor: you can just pass them in. And the order they're in. you can pass them in by

555
00:49:02.040 --> 00:49:04.900
Anthony Taylor: defining them. Okay.

556
00:49:05.430 --> 00:49:07.440
Anthony Taylor: alright,

557
00:49:08.050 --> 00:49:14.829
Anthony Taylor: oh, and this is the same thing as what I just showed you. Just a different function. This function, keyword arguments. Apc.

558
00:49:15.040 --> 00:49:16.989
Anthony Taylor: total, A, B and C

559
00:49:17.680 --> 00:49:21.160
Anthony Taylor: here. They're just calling it by by variable name.

560
00:49:21.460 --> 00:49:22.700
Anthony Taylor: And they got the total.

561
00:49:23.420 --> 00:49:26.620
Anthony Taylor: Okay, here. Same thing this time. You're gonna do it

562
00:49:26.650 --> 00:49:39.130
Anthony Taylor: with a mixture doesn't matter. It's perfectly acceptable. So they have. ABC, first, one is A, B equals. This. C equals that. That's okay. You can do that.

563
00:49:40.160 --> 00:49:43.499
Anthony Taylor: Okay. now let's look at what happens here.

564
00:49:48.420 --> 00:49:50.869
Anthony Taylor: Okay, so we have B and C.

565
00:49:51.480 --> 00:49:57.550
Anthony Taylor: Alan doesn't make a lot of sense right there. Let's see what it does. What?

566
00:49:59.250 --> 00:50:07.009
Anthony Taylor: So because we didn't put it equals on this. It's trying to treat it as a position. But since C. Is the last one.

567
00:50:07.080 --> 00:50:10.199
Anthony Taylor: it's like, there's nothing after Steve, what are you doing?

568
00:50:10.990 --> 00:50:13.810
Anthony Taylor: So it's giving us an argument. Okay.

569
00:50:14.560 --> 00:50:18.310
Anthony Taylor: oh, now, this is exciting.

570
00:50:19.070 --> 00:50:26.870
Anthony Taylor: So here we have interval, a comma b comma c, so we're going to do what's called unpacking an argument.

571
00:50:27.310 --> 00:50:32.319
Anthony Taylor: Some of you may have never seen this before. Okay, even my experienced people.

572
00:50:33.120 --> 00:50:36.139
Anthony Taylor: What that means is

573
00:50:36.190 --> 00:50:45.180
Anthony Taylor: is I am going to. I have it here. This get rid of any confusion. Okay.

574
00:50:47.270 --> 00:50:49.169
Anthony Taylor: so I have

575
00:50:51.290 --> 00:50:53.550
Anthony Taylor: a Tuple and a list.

576
00:50:53.800 --> 00:50:55.830
Anthony Taylor: And there's 3 values in each one.

577
00:50:55.870 --> 00:50:58.680
Anthony Taylor: I have a function that takes 3 values.

578
00:50:59.620 --> 00:51:02.639
Anthony Taylor: So let's assume this is A, B and C,

579
00:51:03.100 --> 00:51:12.000
Anthony Taylor: A, B, and C, okay, what I want to do is after. Then all at once, just using this variable.

580
00:51:12.700 --> 00:51:16.490
Anthony Taylor: And this is how you do it. You call the function.

581
00:51:17.960 --> 00:51:20.230
Anthony Taylor: and you do Star.

582
00:51:20.350 --> 00:51:24.739
Anthony Taylor: and then the name of your iterable.

583
00:51:27.160 --> 00:51:29.269
Anthony Taylor: and then this will pass in

584
00:51:29.530 --> 00:51:33.329
Anthony Taylor: these 3 values and separate them. A, BC,

585
00:51:33.740 --> 00:51:36.010
Anthony Taylor: and this one will pass in ABC,

586
00:51:36.500 --> 00:51:39.060
Anthony Taylor: so we run this, we'll get 2 and 19.

587
00:51:40.120 --> 00:51:41.239
Anthony Taylor: Is that pretty cool?

588
00:51:42.490 --> 00:51:47.110
Anthony Taylor: How am I, Python dev seen that before. Currie Hfton?

589
00:51:47.720 --> 00:51:51.609
Anthony Taylor: No, see, that's a cool one. We learned something new all the time.

590
00:51:52.300 --> 00:51:55.980
Anthony Taylor: Dictionaries, same thing. It's iterable.

591
00:51:56.440 --> 00:52:01.119
Anthony Taylor:  Whoops didn't even do that.

592
00:52:01.890 --> 00:52:05.860
Anthony Taylor: So here we have a function. We're just gonna it's the same function as up above.

593
00:52:05.910 --> 00:52:15.349
Anthony Taylor: Except for we're using a dictionary this time. We have a dictionary. Notice that the values are in different borders.

594
00:52:16.180 --> 00:52:21.430
Anthony Taylor:  this is an interesting thing. So if I run

595
00:52:22.190 --> 00:52:31.240
Anthony Taylor: this. look at what it did. So for a dictionary, if you pass in one star. you get the keys.

596
00:52:32.490 --> 00:52:36.989
Anthony Taylor: Keys are A, B and C. What happens when you add letters together?

597
00:52:39.550 --> 00:52:41.210
Anthony Taylor: They concatenate, remember

598
00:52:45.080 --> 00:52:48.230
Anthony Taylor: which is what you see there. BC, a.

599
00:52:49.290 --> 00:52:54.449
Anthony Taylor: That 2 stars gives you the value of the keys.

600
00:52:55.820 --> 00:52:57.020
Anthony Taylor: So we get

601
00:52:57.290 --> 00:53:00.920
Anthony Taylor: minus 4 plus 100, minus 42,

602
00:53:03.080 --> 00:53:06.070
Anthony Taylor: 54 yawgging it.

603
00:53:06.510 --> 00:53:13.360
Vasquez, Gabriel: What would be the application of using the just values instead of.

604
00:53:13.630 --> 00:53:16.180
Vasquez, Gabriel: or the the keys instead of values. I mean.

605
00:53:16.900 --> 00:53:20.610
Anthony Taylor: II was waiting for that one. And that makes sense. So here's an application of it.

606
00:53:20.620 --> 00:53:30.250
Anthony Taylor: I have the Jason. And guys, I'm going to talk to you talk for just a second. You guys will understand this, and soon I have a Json object. That's

607
00:53:30.940 --> 00:53:37.069
Anthony Taylor: I don't know 175 keys. Okay, but I just need to work keys. I need the column names

608
00:53:38.270 --> 00:53:45.770
Anthony Taylor: alright. And so I can run this, explode the keys out, process the keys, create a table.

609
00:53:45.870 --> 00:53:58.780
Anthony Taylor: whatever I need to do to get like column names and stuff like that. You could do the same thing with like items, or with the for loop, or whatever. But the idea is, is it explodes it so that you could do it in a single call. That's all

610
00:53:59.590 --> 00:54:03.390
Anthony Taylor: I have done this with just the keys a couple of times.

611
00:54:03.530 --> 00:54:07.520
Anthony Taylor: But yeah, I'm with you if I'm doing a dictionary most of the time, I want the value.

612
00:54:08.490 --> 00:54:10.980
Anthony Taylor: But you still have to know the structure of the dictionary.

613
00:54:11.780 --> 00:54:14.890
Anthony Taylor: So, knowing that you can get them is good.

614
00:54:15.110 --> 00:54:16.260
Anthony Taylor: Yes, Christine.

615
00:54:21.130 --> 00:54:22.130
Anthony Taylor: you're muted.

616
00:54:24.690 --> 00:54:33.990
Kanouff, Christine: Why did it return? The total is in that order? Bca.

617
00:54:34.830 --> 00:54:38.809
Anthony Taylor: because it it didn't.

618
00:54:39.070 --> 00:54:39.870
Kanouff, Christine: Okay.

619
00:54:40.510 --> 00:54:41.819
Anthony Taylor: yep, that's it.

620
00:54:41.910 --> 00:54:51.169
Anthony Taylor: Yeah, it's not if it was a equals B for. But I mean, that wouldn't work in this situation. But yeah, it's just that's how the keys work. So it returned.

621
00:54:52.070 --> 00:54:58.130
Kanouff, Christine: It's positional. That's right. Yeah, that's excellent.

622
00:54:58.930 --> 00:55:00.949
Anthony Taylor: Hi, guys, what do you think? Questions.

623
00:55:01.010 --> 00:55:09.539
Anthony Taylor: Gabe. I love your question. But I hope that you see where we could use that, and we may in the future. So yeah, Clayton.

624
00:55:11.800 --> 00:55:13.760
Clayton Graves: what if you only wanted to use

625
00:55:14.080 --> 00:55:17.749
Clayton Graves: certain parts of your list or your dictionary, or your Tuple

626
00:55:18.330 --> 00:55:20.560
Clayton Graves: didn't want to use the whole thing.

627
00:55:21.700 --> 00:55:24.089
Clayton Graves: You don't want to call some values.

628
00:55:25.320 --> 00:55:30.289
Anthony Taylor: I would say. In most cases you would fix that in your function.

629
00:55:31.390 --> 00:55:39.340
Anthony Taylor: So in your function, you know, you would know that you were going to get this, and you could put conditional statements in here

630
00:55:39.360 --> 00:55:42.229
Anthony Taylor: to prevent stuff from coming through that you don't want

631
00:55:42.680 --> 00:55:46.219
otherwise you'd have to pass it in menu. But you wouldn't use this method.

632
00:55:46.630 --> 00:55:49.170
Anthony Taylor: Yeah. yeah, right?

633
00:55:51.520 --> 00:56:05.360
Masarirambi, Rodney: So the the these are the the use of the stars. It kind of maybe I'm just thinking about it, like as in like the multiplication symbol and stuff like that. And but it's kind of seems like it.

634
00:56:06.590 --> 00:56:19.189
Masarirambi, Rodney: And maybe this is the feeling that I'm getting from python. It's like there's a lot of stuff which is used like a lot of similar stuff which is used in different places, and it feels like you could kind of get yourself in trouble that way. But

635
00:56:20.460 --> 00:56:23.109
Anthony Taylor: it has to do with context.

636
00:56:23.630 --> 00:56:32.950
Anthony Taylor: right? It's a lot to do with context. Right? If I saw 2 variables with the star or 2 stars between them I would assume its multiplication are exponent.

637
00:56:33.180 --> 00:56:50.019
Anthony Taylor: But when it's at the beginning and it's, you know, in front of a variable, I'm usually gonna know we're about to unpack.  yeah. And we're gonna do this in Ml, a little bit stuff like this. So it's it's

638
00:56:50.140 --> 00:56:58.220
Anthony Taylor: yeah. But yeah, there's I mean, every programming languages have every programming language I've come across, and it's quite a few

639
00:56:58.350 --> 00:56:59.350
Anthony Taylor: has

640
00:57:00.040 --> 00:57:12.009
Anthony Taylor: peculiarities like that. The good news is. pythons are fairly reasonable, which is why so many people learn right cause they're not. It's not crazy difficult to figure out.

641
00:57:12.740 --> 00:57:19.760
Anthony Taylor: But yeah, I mean, I don't know if I answered the question I agree with. that's all I can say, but you will get used to it. It's just practice.

642
00:57:20.150 --> 00:57:22.810
Masarirambi, Rodney: You answer. You answer that. Make sense, ma'am.

643
00:57:23.580 --> 00:57:25.629
Anthony Taylor: Alright, so it's your turn.

644
00:57:26.080 --> 00:57:31.379
Anthony Taylor:  For some reason my unsolved is not right for the second.

645
00:57:31.630 --> 00:57:35.739
Anthony Taylor: So if you guys run into this where it's like, this doesn't make sense.

646
00:57:35.860 --> 00:57:37.710
Anthony Taylor: Go look at the pie file

647
00:57:37.770 --> 00:57:41.349
Anthony Taylor: and see what it said. So like this here.

648
00:57:41.490 --> 00:57:44.570
Anthony Taylor: yours? Actually, I think I fixed this in the one you guys have.

649
00:57:44.640 --> 00:57:48.350
Anthony Taylor: But in mind it's not. So I'm gonna fix it right now.

650
00:57:48.430 --> 00:57:54.379
Anthony Taylor: I'm just going to highlight this for cell. Replace it with the instructions and then delete these extra ones.

651
00:57:55.720 --> 00:57:59.269
Anthony Taylor: There you go. So really, all you got to do is create a function

652
00:57:59.590 --> 00:58:01.770
Anthony Taylor: called calculate future value.

653
00:58:01.900 --> 00:58:12.909
Anthony Taylor: It's going to have a current loan value, an annual interest value and a month's remaining value. Our argument sorry, and it's going to return the future value of loan as float.

654
00:58:13.140 --> 00:58:23.399
Anthony Taylor: Then they give you variables. and they want you to pass it. This is a dictionary. So they want you to

655
00:58:23.480 --> 00:58:25.849
Anthony Taylor: use those last 2 methods I showed you.

656
00:58:26.890 --> 00:58:29.489
Anthony Taylor: Okay. you guys good with that.

657
00:58:32.450 --> 00:58:35.009
Anthony Taylor: Alright. So far, you're gonna do great.

658
00:58:38.410 --> 00:58:41.000
Anthony Taylor: Okay? 10 min for this hiking.

659
00:58:41.780 --> 00:58:46.430
Dipinto, Matt: remember, for there to be so much information in the notebook.

660
00:58:48.400 --> 00:58:49.610
Anthony Taylor: Yeah, maybe.

661
00:58:51.540 --> 00:58:56.300
Anthony Taylor: Yeah, that's like, you're making this too easy. I'm changing.

662
00:58:56.590 --> 00:58:58.210
Dipinto, Matt: We want it to be painful.

663
00:58:59.010 --> 00:59:01.640
Anthony Taylor: I told you it would be easier today.

664
00:59:02.260 --> 00:59:07.400
Clayton Graves: and I didn't change anything. I swear he's up there a little bit, man. We don't want this painful.

665
00:59:08.430 --> 00:59:15.569
Anthony Taylor: II will say this one of the things that they that I noticed about today's lesson is that it is it's

666
00:59:15.860 --> 00:59:19.970
Anthony Taylor: we used to do functions like day 2 of python.

667
00:59:20.400 --> 00:59:28.530
Anthony Taylor: And I mean, you just started doing it right now. They've added some cool function. I like the unpacking that's never even been in the lesson.

668
00:59:28.890 --> 00:59:36.869
Anthony Taylor:  so you're getting some some newer theme, some more stuff, but they definitely spread it out. which is good. I like that. They did that

669
00:59:36.970 --> 00:59:38.860
Anthony Taylor: fespe. This used to be hard.

670
00:59:40.640 --> 00:59:46.110
Anthony Taylor: so it's pretty cool. So anyway, let's just quickly look at the solution.

671
00:59:46.710 --> 00:59:52.880
Anthony Taylor: Here's your future value. Here it is. It's gonna create this function.

672
00:59:53.780 --> 00:59:59.440
Anthony Taylor:  here's the dictionary that we're going to create for it.

673
01:00:00.470 --> 01:00:03.059
Anthony Taylor: And then here we created it. Why is my.

674
01:00:05.410 --> 01:00:09.359
Anthony Taylor: oh, okay. We passed. They didn't even do. They didn't even do the stars.

675
01:00:09.720 --> 01:00:11.450
Anthony Taylor: How many of you did the stars

676
01:00:11.990 --> 01:00:19.989
Dipinto, Matt: that we couldn't do the stars, because the variables and the arguments were out of order, so we could rearrange the dictionary. But you couldn't. Just

677
01:00:20.210 --> 01:00:24.230
Anthony Taylor: that's a good point. I actually told Cindy and Natalie to do the stars.

678
01:00:24.330 --> 01:00:29.779
Anthony Taylor: But okay. but you know what they got the right answer. That's interesting. They must have reorganized.

679
01:00:31.320 --> 01:00:41.170
Anthony Taylor: But you could. You could have done a couple of things here, since there are different orders. Yeah, you can either rearrange these 2 like like

680
01:00:41.260 --> 01:00:42.389
Anthony Taylor: Matt said.

681
01:00:42.690 --> 01:00:45.320
Anthony Taylor: Or you could rearrange these 2,

682
01:00:47.200 --> 01:00:49.279
Anthony Taylor: either one would have worked. Yeah, Gabe.

683
01:00:50.010 --> 01:01:00.229
Vasquez, Gabriel: when we did ours. We use the star one, the double star on our first one, and we also assigned

684
01:01:00.600 --> 01:01:07.320
Vasquez, Gabriel: the values accordingly, and we got the same car value for each one.

685
01:01:07.790 --> 01:01:14.420
Anthony Taylor: That's cool. That's very cool. So you're saying, well, let's see, month interest, annual interest.

686
01:01:14.470 --> 01:01:18.809
Anthony Taylor: Yeah, let's see what happens when we just switch these 2. You would actually think that would work

687
01:01:18.910 --> 01:01:21.229
Anthony Taylor: if it were, I mean, when I think about it.

688
01:01:21.660 --> 01:01:28.390
Anthony Taylor: II wouldn't do this. So I mean, this is not something I would normally do in this direction. But

689
01:01:28.860 --> 01:01:30.120
Anthony Taylor: let's try it and see.

690
01:01:32.460 --> 01:01:35.199
Anthony Taylor: Yeah, I kept that different cause. It switched those 2.

691
01:01:36.570 --> 01:01:39.760
Meredith McCanse (she/her): Wait. Can you show this?

692
01:01:41.120 --> 01:01:45.260
Anthony Taylor: Can I look at Gabe? Sure, you wanna show us, Kate?

693
01:01:45.660 --> 01:01:47.120
Anthony Taylor: Show us

694
01:01:50.440 --> 01:01:52.629
Vasquez, Gabriel: so 25, 6, 85.

695
01:01:52.800 --> 01:01:53.550
Anthony Taylor: Yeah.

696
01:01:54.000 --> 01:01:59.910
Vasquez, Gabriel: yeah, this is the one where we did the double star, and it came out the same. And this is one where we assigned

697
01:02:02.000 --> 01:02:03.130
Vasquez, Gabriel: the

698
01:02:04.210 --> 01:02:09.679
Vasquez, Gabriel: the values to the courting argument. and we still got the same.

699
01:02:11.980 --> 01:02:15.840
Anthony Taylor: But but look up above, you're putting them in the same order.

700
01:02:17.700 --> 01:02:20.670
Anthony Taylor: Oh, no, I see annual interest rate.

701
01:02:22.820 --> 01:02:33.360
Vasquez, Gabriel: Yeah. And this and the arguments it goes current loan, annual interest rate and months remaining. But this one, it's opposite for months, remaining an annual interest rate. Yet we got the same

702
01:02:33.840 --> 01:02:35.120
Vasquez, Gabriel: output.

703
01:02:36.170 --> 01:02:39.839
Anthony Taylor: That's interesting, cause I just do me a favor.

704
01:02:39.880 --> 01:02:46.160
Anthony Taylor: Let's do this. Let me get my arrow. I want you to restart.

705
01:02:50.000 --> 01:02:52.569
Anthony Taylor: Go ahead and then runoff

706
01:02:54.170 --> 01:02:56.469
Anthony Taylor: it was under my arrow right there

707
01:03:01.510 --> 01:03:05.599
Anthony Taylor: still came out the same. That's kind of interesting

708
01:03:05.880 --> 01:03:09.369
Anthony Taylor: cause. I literally just hit that on my screen, and it didn't do it.

709
01:03:11.140 --> 01:03:12.320
Anthony Taylor: Sorry. Go ahead.

710
01:03:12.650 --> 01:03:24.890
Anthony Taylor: Just to say, Is there a chance that it actually does use them as keyword arguments? Alright, it's not going to do that.

711
01:03:25.140 --> 01:03:27.340
Anthony Taylor: but I don't know. I mean

712
01:03:27.360 --> 01:03:34.080
Anthony Taylor: it kind of makes sense that it would do that. I kind of figured it would. But then, when it didn't. I'm like, alright. Well, it doesn't do that. So

713
01:03:34.220 --> 01:03:37.610
Anthony Taylor:  this is one of those moments where.

714
01:03:37.670 --> 01:03:41.040
Anthony Taylor: if you do, it works, I'm excited that it works.

715
01:03:41.360 --> 01:03:47.220
Anthony Taylor: So that's cool. Good catch. good catch. I'm still gonna look at it online and see why Mike didn't do it.

716
01:03:48.710 --> 01:03:49.790
Anthony Taylor: It's strange.

717
01:03:51.290 --> 01:03:51.990
Anthony Taylor: bye.

718
01:03:52.770 --> 01:03:58.489
Anthony Taylor: not like Cassie. Oh, wait! But I wasn't doing the stars versus.

719
01:03:58.540 --> 01:04:01.150
Anthony Taylor: okay, no. I just rearranged these guys.

720
01:04:01.410 --> 01:04:03.990
Anthony Taylor: I see I didn't do the stars.

721
01:04:04.950 --> 01:04:06.399
Anthony Taylor: Let's do that real quick.

722
01:04:07.700 --> 01:04:19.629
Anthony Taylor: I see what you're saying now. I didn't even try that. So start start. Yeah, it's entirely possible that it's just it's picking up the key value as well.

723
01:04:20.040 --> 01:04:25.060
Anthony Taylor: I like that. If it is. That's fantastic. it does appear to be.

724
01:04:26.990 --> 01:04:41.500
Anthony Taylor: Oh, good catch! Who was that? Gabe? Good job? Game. good job. excellent work. Let's continue. Okay. So let's think about we have functions

725
01:04:41.720 --> 01:04:43.670
Anthony Taylor: which encapsulate code.

726
01:04:44.500 --> 01:04:48.339
Anthony Taylor:  way past this. Now

727
01:04:52.860 --> 01:04:55.050
Anthony Taylor: hold on again. As to where we are now.

728
01:04:58.300 --> 01:04:59.150
Anthony Taylor: okay.

729
01:04:59.710 --> 01:05:03.619
Anthony Taylor: so we have functions that encapsulate code.

730
01:05:04.180 --> 01:05:10.179
Anthony Taylor:  we also need to be able to return value

731
01:05:10.340 --> 01:05:13.330
Anthony Taylor: now, so far, what have we been returning almost every time.

732
01:05:18.010 --> 01:05:19.890
Derek Rikke: Bring no bring.

733
01:05:20.970 --> 01:05:23.740
Anthony Taylor: We've been returning print. Right? It's the string.

734
01:05:23.960 --> 01:05:25.880
Anthony Taylor: Okay? So

735
01:05:25.890 --> 01:05:31.010
Anthony Taylor: well, that is awesome. It's usually not use functions, for

736
01:05:31.280 --> 01:05:37.550
Anthony Taylor: we usually use functions to create stuff to calculate stuff to

737
01:05:38.520 --> 01:05:43.720
Anthony Taylor: things. Okay. So instead of

738
01:05:44.180 --> 01:05:47.139
Anthony Taylor: printing will return something.

739
01:05:48.600 --> 01:05:53.169
Anthony Taylor: So basically, what this means is is, now we're gonna say, Hey, we have this function.

740
01:05:53.440 --> 01:06:02.410
Anthony Taylor: We're going to pass in some values. We're going to do something with those values. And we're going to return back to the program that call me

741
01:06:03.360 --> 01:06:04.410
Anthony Taylor: something.

742
01:06:06.560 --> 01:06:07.280
Anthony Taylor: Okay.

743
01:06:07.770 --> 01:06:13.689
Anthony Taylor: So and typically, what we do with this is, this is how we like assign the value to a variable.

744
01:06:15.900 --> 01:06:16.740
Aye.

745
01:06:17.170 --> 01:06:21.689
Anthony Taylor: yeah. So let's go look at how that looks in code.

746
01:06:25.280 --> 01:06:29.499
Anthony Taylor: So here you can see just the exact we'll see here we are just printing a string.

747
01:06:30.830 --> 01:06:37.579
Anthony Taylor: So we have a function. It's going to print an average of these numbers.

748
01:06:39.120 --> 01:06:47.229
Anthony Taylor: Okay, pretty cool. But here, instead of printing it. we're gonna return it now, if I just go back

749
01:06:47.890 --> 01:06:49.790
Anthony Taylor: and run this same thing.

750
01:06:51.750 --> 01:06:52.690
Anthony Taylor: where'd it go?

751
01:06:56.220 --> 01:06:57.329
Anthony Taylor: I called it.

752
01:06:58.380 --> 01:07:02.570
Anthony Taylor: but it's gone, we'll do it again. Oops! Aye, aye.

753
01:07:02.950 --> 01:07:06.280
Anthony Taylor: I shrunk it. There it goes! Called it again, called it again.

754
01:07:06.410 --> 01:07:07.830
Anthony Taylor: Is it doing anything?

755
01:07:09.400 --> 01:07:11.619
Masarirambi, Rodney: I mean? It's it actually is.

756
01:07:11.730 --> 01:07:12.930
Anthony Taylor: What was that? Rodney

757
01:07:12.970 --> 01:07:23.859
Anthony Taylor: Alright? I thought you were asking us hunting. I am, I am II have like 1 s pause before II continue. But yes, absolutely. I wanted to hear what you said. What'd you say?

758
01:07:23.990 --> 01:07:25.290
Masarirambi, Rodney: So it is.

759
01:07:25.500 --> 01:07:38.449
Masarirambi, Rodney: It is calculating, it's just that. And and we're turning it. We just haven't told it to return something to we. It's it's it's kinda like it's saved. But we just haven't retrieved it

760
01:07:39.110 --> 01:07:42.189
Anthony Taylor: exactly. So what we're going to do

761
01:07:43.720 --> 01:07:48.210
Anthony Taylor: is now I'm going to call the function pass in some numbers

762
01:07:49.670 --> 01:07:51.510
Anthony Taylor: and assign it to a variable.

763
01:07:52.560 --> 01:07:55.270
Anthony Taylor: And this could be any variable. This could be Bob. This could be any.

764
01:07:55.950 --> 01:08:00.219
Anthony Taylor: And then we're gonna print it out. So we run that. And you see it works.

765
01:08:00.650 --> 01:08:04.540
Anthony Taylor: So return says, run this function.

766
01:08:04.760 --> 01:08:10.319
Anthony Taylor: and whatever gets returned, I want you to assign it to the other side of the sea.

767
01:08:12.180 --> 01:08:13.120
Anthony Taylor: Okay.

768
01:08:15.020 --> 01:08:21.919
Anthony Taylor: Very important concept. Most of what we are going to do is going to be stuff like this.

769
01:08:22.330 --> 01:08:26.840
Anthony Taylor: We're going to have a function, whether it be ours or somebody else's.

770
01:08:27.170 --> 01:08:28.890
Anthony Taylor: we're going to execute it.

771
01:08:28.920 --> 01:08:37.829
Anthony Taylor: The result of that function will be assigned to something else, some dot variable, some object, something like that. Yes, I

772
01:08:39.660 --> 01:08:49.019
Anthony Taylor: I'm sorry I just needed you to walk through that again. That's fine. That's totally fine. So let's go through our definition. Let's just like break down the function.

773
01:08:49.399 --> 01:08:55.809
Anthony Taylor: We have our definition. We have our body. But now, when we call the function.

774
01:08:56.200 --> 01:09:00.530
Anthony Taylor: we have to do something with the output of the function.

775
01:09:00.689 --> 01:09:09.680
Anthony Taylor: So it's not a print statement. However, you can do this. You could do print and then call our function.

776
01:09:16.200 --> 01:09:18.739
Anthony Taylor: Okay, you could actually do this. And this will work

777
01:09:20.390 --> 01:09:25.210
Anthony Taylor: all right. But basically, all it's doing is printing the return

778
01:09:26.000 --> 01:09:27.309
Anthony Taylor: of this function.

779
01:09:28.529 --> 01:09:34.300
Anthony Taylor: So all this function. This return statement says, Take whatever we're doing, whatever we've done.

780
01:09:34.380 --> 01:09:41.479
Anthony Taylor: and give it back to whatever called it. So here we're giving it to this variable.

781
01:09:41.689 --> 01:09:50.650
Anthony Taylor: Here, we're using the print function, and we're going to print out the output. So it's going to run this function and then give it to the print function

782
01:09:51.149 --> 01:09:53.649
Anthony Taylor: and print's going to output this way.

783
01:09:54.960 --> 01:09:57.419
Anthony Taylor: Okay, you can use this in math, too.

784
01:09:57.680 --> 01:10:03.939
Anthony Taylor: You want to add these guys up. We can do that. We could do just one more example. We could say,

785
01:10:04.280 --> 01:10:06.970
Anthony Taylor: I don't know average total

786
01:10:07.320 --> 01:10:10.470
Anthony Taylor: equals. And then we could run this function twice

787
01:10:15.560 --> 01:10:19.190
Anthony Taylor: because it returns average right?

788
01:10:20.260 --> 01:10:23.619
Anthony Taylor: It returns an actual number. So we can get away with this.

789
01:10:28.440 --> 01:10:36.940
Anthony Taylor: And you realize I'm just randomly selecting numbers. And then we'll just print average total

790
01:10:38.650 --> 01:10:39.740
Anthony Taylor: that works too.

791
01:10:40.320 --> 01:10:42.849
Anthony Taylor: Okay? Because this return

792
01:10:44.260 --> 01:10:47.859
Anthony Taylor: about. And now we can add those 2 volumes together

793
01:10:49.070 --> 01:10:55.250
Anthony Taylor: is that assigned. I do not get the feeling that you got that? Get that? Sorry?

794
01:10:55.950 --> 01:10:56.810
Anthony Taylor: Okay.

795
01:10:56.920 --> 01:11:07.569
Baro, Sonja: returning the average instead of printing, you're taking whatever it is that you whatever that average is in your

796
01:11:07.900 --> 01:11:13.320
Baro, Sonja: gonna put it into another spot. Is that what you were doing first?

797
01:11:13.420 --> 01:11:15.190
Anthony Taylor: Yes, we're creating it

798
01:11:15.620 --> 01:11:18.700
Anthony Taylor: to hand it off to the calling program.

799
01:11:19.940 --> 01:11:24.280
Anthony Taylor: hey? Maybe it'll help, and I don't want to go too far down this out to Dorian Path.

800
01:11:24.350 --> 01:11:27.400
Anthony Taylor: But I'll explain this real quick. So

801
01:11:27.720 --> 01:11:31.180
Anthony Taylor: in yes, Jim, before I go there, it's the same question.

802
01:11:32.200 --> 01:11:38.460
Dahlgren, Jennifer: It's slightly different. So like, if you have a table of variables, could you put the variable name into that

803
01:11:38.900 --> 01:11:39.870
Dahlgren, Jennifer: section

804
01:11:40.840 --> 01:11:43.819
Anthony Taylor: like down here in the body or pass it in.

805
01:11:43.940 --> 01:11:46.069
Dahlgren, Jennifer: Oh, I was looking at the average total

806
01:11:46.160 --> 01:11:52.670
Dahlgren, Jennifer: where you have 1, 4, 6. Yeah, we could have done that. Sure. We could have passed in

807
01:11:52.760 --> 01:11:56.449
Anthony Taylor: like like an interval with the asterisks and all that kind of stuff.

808
01:11:58.490 --> 01:12:01.850
Anthony Taylor:  okay. So

809
01:12:03.180 --> 01:12:04.650
Anthony Taylor: going back to the return.

810
01:12:04.740 --> 01:12:13.130
Anthony Taylor: So in object-oriented programming. We're gonna talk about this more later. But I'll give you a quick little example. We will create multiple

811
01:12:15.700 --> 01:12:21.310
Anthony Taylor: functions. And for my people who know auditory and programming. Just bear with me. Okay.

812
01:12:21.580 --> 01:12:27.669
Anthony Taylor:  and each function will have a purpose. So let's say, we have a doll.

813
01:12:27.870 --> 01:12:30.310
Anthony Taylor: And we want to create a wagtail function.

814
01:12:31.090 --> 01:12:36.729
Anthony Taylor: Okay? And we're going to run the wagtail function and the dog is going to receive it.

815
01:12:36.950 --> 01:12:38.219
Anthony Taylor: And wagons tape.

816
01:12:39.610 --> 01:12:50.420
Anthony Taylor: Okay? So we have this dog object. We have a bark. and it says. Return bark and returns the bar. Eat your turns to eat.

817
01:12:50.880 --> 01:12:59.919
Anthony Taylor: Okay, so functions are pieces that we use to build a bigger application. Rarely are you going to print from a function

818
01:13:00.040 --> 01:13:01.410
Anthony Taylor: unless you're debugging?

819
01:13:02.100 --> 01:13:08.109
Anthony Taylor: Okay? So you're gonna see a lot of this, we use these constantly, so you will get a lot more practice.

820
01:13:08.660 --> 01:13:10.890
Baro, Sonja: So I guess you don't get it soon.

821
01:13:11.420 --> 01:13:19.539
Baro, Sonja: The piece where I'm not following you is when you went to first, average equals average numbers 1, 2, 3,

822
01:13:19.940 --> 01:13:23.489
Baro, Sonja: that I don't understand.

823
01:13:23.960 --> 01:13:42.329
Baro, Sonja: So those are the values, 1, 2, and 3 that you are creating the average, determining the average. And then the return. I don't know where the return is on this, on the bottom is just doing the work and putting it in this area.

824
01:13:44.750 --> 01:13:46.060
Anthony Taylor: that's all it's doing.

825
01:13:47.060 --> 01:13:49.990
Anthony Taylor: So it does. Whatever this says to do

826
01:13:50.450 --> 01:13:52.170
Clayton Graves: me exactly.

827
01:13:52.280 --> 01:13:58.180
Clayton Graves: you essentially put it in a bucket that you can't see. So you still have the bucket full of water.

828
01:13:58.310 --> 01:14:00.170
Baro, Sonja: But see the bucket

829
01:14:00.920 --> 01:14:03.629
Clayton Graves: because the buckets put away for another purpose.

830
01:14:04.420 --> 01:14:17.220
Anthony Taylor: No, it's a variable. It's like any other variable. If you assign a value to the variable. All we're doing is we're adding complexity to the value that we're adding to the variable.

831
01:14:18.030 --> 01:14:20.930
Anthony Taylor: Does that make sense, Diana. So we have

832
01:14:21.090 --> 01:14:24.920
Anthony Taylor: this function that does whatever this function does.

833
01:14:25.230 --> 01:14:37.510
Anthony Taylor: And when it's done. it says, Okay, I have this average. I'm going to pass it back to whatever called me. So that average ends up inside this period.

834
01:14:37.820 --> 01:14:40.309
Anthony Taylor: and then you can use it for whatever you want.

835
01:14:41.920 --> 01:14:45.529
Anthony Taylor: Okay, I let let's move forward a little bit, and then let's see if it

836
01:14:46.440 --> 01:14:49.529
Anthony Taylor: comes around. Maybe I'll come see you and yet.

837
01:14:49.650 --> 01:14:52.860
Anthony Taylor: and we'll we'll work it out together alright

838
01:14:53.000 --> 01:14:57.110
Anthony Taylor: cause, that's all there is to show on that. So let's look at the activity.

839
01:15:00.330 --> 01:15:08.729
Anthony Taylor: And another one I need to clean up.  yeah, I said, y'all's, I think, is already cleaned up. So don't worry about it.

840
01:15:09.920 --> 01:15:13.299
Anthony Taylor: I actually deleted everything before class today, like in 80.

841
01:15:13.660 --> 01:15:18.279
Anthony Taylor: Okay, so here you have a function called process plate.

842
01:15:18.480 --> 01:15:23.439
Anthony Taylor: You're going to do all this stuff. You're going to create the variable called total claims.

843
01:15:24.440 --> 01:15:26.660
Anthony Taylor: Calculate the total payout

844
01:15:27.230 --> 01:15:31.369
Anthony Taylor: and then return only the total payout variable.

845
01:15:31.440 --> 01:15:36.600
Anthony Taylor: So you got all this activity happening in this function. But I want you to return

846
01:15:36.870 --> 01:15:40.319
Anthony Taylor: the total payout, using weekly claims

847
01:15:40.880 --> 01:15:42.060
Anthony Taylor: and print it out

848
01:15:42.620 --> 01:15:49.030
Anthony Taylor: all right. I know you could print it in the function, but I don't want you print function. I want you to put it in a variable, and then print it out.

849
01:15:49.720 --> 01:15:51.400
Anthony Taylor: Aye, aye.

850
01:15:51.500 --> 01:15:56.240
Anthony Taylor: and I will. Either I will come, or one of the chase will come. Sign yourself.

851
01:15:56.260 --> 01:15:59.660
Anthony Taylor: We'll go work you through it. Alright!

852
01:16:00.130 --> 01:16:02.650
Anthony Taylor: Welcome back everybody

853
01:16:03.400 --> 01:16:06.460
Clayton Graves: to be fair, Brandon. Any kind of mass is this.

854
01:16:08.030 --> 01:16:09.870
Anthony Taylor: math is fun.

855
01:16:11.970 --> 01:16:15.159
Anthony Taylor: Alright! Let's look. Take a quick look at

856
01:16:15.610 --> 01:16:16.900
Anthony Taylor: at this.

857
01:16:17.300 --> 01:16:23.439
Anthony Taylor: We have my, I got everything going. Okay, we're processing claims

858
01:16:23.520 --> 01:16:26.670
Anthony Taylor: were passing in a list which was important.

859
01:16:27.580 --> 01:16:33.070
Anthony Taylor: Okay, you didn't want to pass in a bunch of values. You wanted to say, Hey, I'm gonna pass in. A whole list of values

860
01:16:33.100 --> 01:16:35.000
Anthony Taylor: could be one could be 20.

861
01:16:36.520 --> 01:16:39.120
Anthony Taylor: I we're gonna return the float.

862
01:16:39.150 --> 01:16:50.620
Anthony Taylor: And it's going to be the total, which is 30% of the sum. So first we get this up. could you have done this in one line. Yes, you could. Okay. Then we're gonna take the total claims.

863
01:16:51.030 --> 01:16:52.699
Anthony Taylor: multiply it by 30

864
01:16:52.850 --> 01:16:55.770
Anthony Taylor: point 30, get the payout and turn the payout.

865
01:16:56.260 --> 01:16:57.030
Anthony Taylor: sleep.

866
01:16:58.660 --> 01:17:00.850
Anthony Taylor: Aye. and then

867
01:17:02.790 --> 01:17:06.710
Anthony Taylor: don't need that. The only thing it did that was

868
01:17:07.500 --> 01:17:10.459
Anthony Taylor: different. Was it? Formatted it?

869
01:17:10.820 --> 01:17:18.060
Anthony Taylor: And we did cover this the other day. Very briefly. So if you didn't get this. feelings aren't hurt

870
01:17:18.100 --> 01:17:20.719
Anthony Taylor: probably fine. You coulda used Ralph.

871
01:17:21.820 --> 01:17:23.170
Anthony Taylor: That would have worked too.

872
01:17:23.580 --> 01:17:26.900
Anthony Taylor: Anybody use brown mics like I should use.

873
01:17:29.360 --> 01:17:32.980
Anthony Taylor: Okay, you could have used round, or you could have done this formatting straight.

874
01:17:33.410 --> 01:17:37.860
Anthony Taylor:  the difference is round, returns a number.

875
01:17:38.600 --> 01:17:47.489
Anthony Taylor: This returns a string. So if it matters, you always use that. if it doesn't matter, if it's a string or a number, you can do this.

876
01:17:48.180 --> 01:17:50.389
Anthony Taylor: Aye, you run this

877
01:17:50.520 --> 01:17:51.310
Anthony Taylor: well.

878
01:17:52.740 --> 01:17:53.890
Anthony Taylor: any questions.

879
01:17:56.150 --> 01:17:57.709
Anthony Taylor: How you guys feeling about

880
01:17:58.670 --> 01:18:06.639
Anthony Taylor: functions so far. One to 5. Once to fives. give me some fists. I see some good ones. Hi, tues, okay.

881
01:18:07.050 --> 01:18:12.129
Anthony Taylor: she was okay. You guys have only known about functions for like what? An hour, 2 h

882
01:18:12.220 --> 01:18:13.790
Anthony Taylor: feeling pretty good with that.

883
01:18:14.430 --> 01:18:16.189
Anthony Taylor: Okay, alright.

884
01:18:16.220 --> 01:18:17.459
Anthony Taylor: the stick break.

885
01:18:17.750 --> 01:18:20.600
Anthony Taylor: Everybody needs rest of brain fuel up

886
01:18:20.840 --> 01:18:23.630
Anthony Taylor: 15 min. So come back at

887
01:18:23.860 --> 01:18:26.399
Anthony Taylor: 8 4, no.

888
01:18:26.790 --> 01:18:34.570
Anthony Taylor: yeah. 8, 40. I'll see you then very fast lecture like, Oh, I got that perfect.

889
01:18:35.010 --> 01:18:36.539
Anthony Taylor: Okay? Well.

890
01:18:36.620 --> 01:18:38.039
Anthony Taylor: you'll have to review it.

891
01:18:39.300 --> 01:18:40.340
Anthony Taylor: So

892
01:18:43.630 --> 01:18:52.649
Anthony Taylor: 5 months popular, you guys got that. I told you that a few times right? It's like the most popular language after HTML and Javascript

893
01:18:53.360 --> 01:19:01.539
Anthony Taylor:  and and the really Kogi, like geeky people, they want to make everything pythonic.

894
01:19:02.380 --> 01:19:04.780
Anthony Taylor: I know you guys like that one python.

895
01:19:06.160 --> 01:19:08.120
Anthony Taylor: which basically means

896
01:19:09.700 --> 01:19:16.899
Anthony Taylor: they're going to try to make it as short and as few words as possible.

897
01:19:18.120 --> 01:19:21.199
Anthony Taylor: which has led to both very handy.

898
01:19:21.420 --> 01:19:25.819
Anthony Taylor:  and very interesting capabilities.

899
01:19:27.320 --> 01:19:30.290
Anthony Taylor:  we're gonna talk about

900
01:19:30.400 --> 01:19:43.420
Anthony Taylor: something called anonymous and built in functions primarily anonymous first. And what anonymous means basically is we're not going to define the function.

901
01:19:44.020 --> 01:19:51.410
Anthony Taylor: We're going to create a function. use it immediately. And then basically forget about.

902
01:19:53.180 --> 01:19:55.800
Anthony Taylor: okay, that's an anonymous marks.

903
01:19:56.320 --> 01:20:05.589
Anthony Taylor: What does that mean? Well, we got 3 of them. We're gonna talk about map, lambda and filter, which really filter kind of uses lambda. But that's our own. Let's go through each one.

904
01:20:06.380 --> 01:20:17.949
Anthony Taylor: The map function is basically a function that you that that we use for list comprehension. Okay. what does that mean? It means it applies a function

905
01:20:18.100 --> 01:20:30.470
Anthony Taylor: to each iteration of an iterable object. So let's think of our list. 24654396121. So if we say, map.

906
01:20:30.960 --> 01:20:37.880
Anthony Taylor: we're going to create. We're going to call a function that we've already created. Maybe.

907
01:20:38.320 --> 01:20:39.479
Anthony Taylor: But we could.

908
01:20:39.660 --> 01:20:44.750
Anthony Taylor: And then executed against each one of these items

909
01:20:45.120 --> 01:20:46.490
Anthony Taylor: returning.

910
01:20:48.700 --> 01:20:51.500
Anthony Taylor: Usually another list.

911
01:20:51.720 --> 01:20:55.810
Anthony Taylor: So like, if we could pass in, this, Tuple will return

912
01:20:56.230 --> 01:20:59.139
Anthony Taylor: an interval object, whether it be a duple or a list.

913
01:21:00.090 --> 01:21:02.869
Anthony Taylor: Okay, so one more time. Matt.

914
01:21:03.020 --> 01:21:08.129
Anthony Taylor: is the name of the function. Well. the built in function that we're going to call

915
01:21:08.730 --> 01:21:12.100
Anthony Taylor: it's going to call a function that we've created

916
01:21:12.400 --> 01:21:14.179
Anthony Taylor: called divide by 7,

917
01:21:14.690 --> 01:21:18.540
Anthony Taylor: and it's going to run it with each one

918
01:21:18.680 --> 01:21:19.650
Anthony Taylor: of

919
01:21:19.850 --> 01:21:27.670
Anthony Taylor: these values. So we're going to so divide by 7 is going to take an argument of a single digit of a single number.

920
01:21:27.740 --> 01:21:32.400
Anthony Taylor: and we're going to pass in one number and run it for each one

921
01:21:32.620 --> 01:21:34.550
Anthony Taylor: getting back a list.

922
01:21:35.680 --> 01:21:39.239
Anthony Taylor: Okay? Well, let's go look at that, and then come back to the slides.

923
01:21:40.230 --> 01:21:41.470
Anthony Taylor: So

924
01:21:43.560 --> 01:21:45.370
Anthony Taylor: want to close all this stuff here.

925
01:21:51.620 --> 01:21:53.190
Anthony Taylor: I had a lot of stuff open. Huh?

926
01:21:55.220 --> 01:21:55.980
Anthony Taylor: Okay.

927
01:21:56.250 --> 01:22:02.719
Anthony Taylor:  there we go.

928
01:22:05.680 --> 01:22:16.250
Anthony Taylor: So here's our function. Okay. And and this is the way we've been taught to do it. This is the way we've been doing it today. So we have a function. It's called Divide by 7.

929
01:22:16.340 --> 01:22:23.220
Anthony Taylor: We're going to pass in a number. We're going to return the number divided by 7

930
01:22:23.680 --> 01:22:28.000
Anthony Taylor: rounded to 3 digits. Does everybody see that

931
01:22:29.870 --> 01:22:32.009
Anthony Taylor: nobody has an issue with that? Right?

932
01:22:33.400 --> 01:22:39.990
Anthony Taylor: Okay? Good. So let's just pass something into oh. we did. We passed in this list. Oh, we did list comprehension.

933
01:22:40.100 --> 01:22:46.590
Anthony Taylor: So here we did a list comprehension which you guys learned the other day. So we called the function.

934
01:22:47.280 --> 01:22:52.149
Anthony Taylor: And we said, for every number in this list, execute this function

935
01:22:52.320 --> 01:22:58.559
Anthony Taylor: just like that. And we got this, this fact that looked familiar to everybody

936
01:23:00.050 --> 01:23:02.860
Anthony Taylor: anybody like totally like I have no idea what that.

937
01:23:03.960 --> 01:23:07.649
Anthony Taylor: So remember, list comprehension. Right? We have a for loop.

938
01:23:09.270 --> 01:23:14.680
Anthony Taylor: And this is what we're going to do with the with the variable from the for that's it.

939
01:23:15.410 --> 01:23:16.970
Anthony Taylor: Okay? All right.

940
01:23:17.340 --> 01:23:18.470
Anthony Taylor: So

941
01:23:20.470 --> 01:23:22.800
Anthony Taylor: we alright

942
01:23:23.890 --> 01:23:32.719
Anthony Taylor: also. Well, this is this is basically they're just doing this again right here. So you see the function passing in this variable.

943
01:23:33.140 --> 01:23:42.889
Anthony Taylor: and it's going to be one time for each of those values. It's going to go into that variable and we're gonna print it out same thing as you saw up above.

944
01:23:43.340 --> 01:23:45.210
Anthony Taylor: Okay, so we got to see that

945
01:23:45.480 --> 01:23:49.529
Anthony Taylor: twice. Alright. Now let's see what map does with.

946
01:23:50.650 --> 01:23:51.990
Anthony Taylor: So map

947
01:23:53.160 --> 01:23:54.770
Anthony Taylor: is a function

948
01:23:55.980 --> 01:23:59.240
Anthony Taylor: we know, because look, it's a word followed by a parenthesis.

949
01:24:00.700 --> 01:24:07.880
Anthony Taylor: And we're going to in the map function. You pass in 2 things. a function

950
01:24:08.240 --> 01:24:12.359
Anthony Taylor: that you've already defined for now, so a function

951
01:24:12.580 --> 01:24:15.179
Anthony Taylor: and an iterable object.

952
01:24:17.420 --> 01:24:24.679
Anthony Taylor: So we're passing in divide by 7 and an interval object so divided by 7, even though it takes an argument

953
01:24:24.720 --> 01:24:28.980
Anthony Taylor: map, will take these values and apply them to that argument

954
01:24:29.500 --> 01:24:31.280
Anthony Taylor: and thus return

955
01:24:35.650 --> 01:24:42.020
Anthony Taylor: a list. Well, it's not actually returning a list. It's returning an object which we are converting into a list.

956
01:24:44.220 --> 01:24:46.940
Anthony Taylor: Okay? So if we've tried to print

957
01:24:47.480 --> 01:24:48.529
Anthony Taylor: right here

958
01:24:49.510 --> 01:24:51.340
Anthony Taylor: map function.

959
01:24:51.740 --> 01:24:53.700
Anthony Taylor: you're going to get an object.

960
01:24:55.850 --> 01:24:56.780
Anthony Taylor: Okay?

961
01:24:58.450 --> 01:25:04.829
Anthony Taylor: So we're going to convert that object to a list. And this is what you get, basically the same as the list. Comprehension.

962
01:25:06.440 --> 01:25:08.520
Anthony Taylor: not basic 100%.

963
01:25:09.880 --> 01:25:15.549
Anthony Taylor: Hi, so what I want, you understand? Map 2 arguments, a function.

964
01:25:16.590 --> 01:25:19.360
Anthony Taylor: a interval and iterable.

965
01:25:20.810 --> 01:25:22.340
Anthony Taylor: So I gotta worry about. Right now

966
01:25:22.370 --> 01:25:27.889
Anthony Taylor: we're gonna come back to this. Okay? A lambda function

967
01:25:27.960 --> 01:25:29.960
Anthony Taylor: is not defined.

968
01:25:33.970 --> 01:25:41.539
Anthony Taylor: A lambda function is executed within the map function, and its output is returned just like a function.

969
01:25:43.020 --> 01:25:46.040
Anthony Taylor: But once they're done. they're gone.

970
01:25:46.340 --> 01:25:49.810
Anthony Taylor: You can't call them from any other process.

971
01:25:51.380 --> 01:25:52.340
Anthony Taylor: Okay.

972
01:25:54.660 --> 01:25:59.090
Anthony Taylor: this is basically the thing look like. So you have.

973
01:25:59.420 --> 01:26:06.100
Anthony Taylor: Lambda. you have an argument, and then you have a one line expression.

974
01:26:06.430 --> 01:26:08.099
Anthony Taylor: So what's this one doing?

975
01:26:08.150 --> 01:26:15.770
Anthony Taylor: Has this argument? And it's going to multiply this argument by itself. So if we pass in a 2, this would be 4,

976
01:26:16.650 --> 01:26:18.550
Anthony Taylor: got it alright.

977
01:26:21.290 --> 01:26:29.799
Anthony Taylor: This is how it's used in a map function to do what we just did. So we have a map. Why did I say the 2 things we have to pass in on

978
01:26:31.220 --> 01:26:32.130
Anthony Taylor: anybody

979
01:26:35.320 --> 01:26:38.599
Derek Rikke: said, get passing it over

980
01:26:38.950 --> 01:26:46.600
Anthony Taylor: right? So here's the function. It is now an anonymous lambda function, which means it's not defined.

981
01:26:47.840 --> 01:26:55.490
Anthony Taylor: I mean, I would argue that by putting the word lambda there, you're basically telling it. It's a function. But you put lambda.

982
01:26:55.620 --> 01:27:03.460
Anthony Taylor: You put the argument that you want to pass in from the iterable. And then you say, do this with that.

983
01:27:04.070 --> 01:27:07.780
Anthony Taylor: So we're saying, Round X, divided by 7 comma. 3,

984
01:27:10.060 --> 01:27:16.629
Anthony Taylor: and then we pass in the interim. The output will be exactly what you saw before.

985
01:27:17.140 --> 01:27:20.199
Anthony Taylor: Okay, we'll come back to filter in just a second.

986
01:27:20.400 --> 01:27:30.870
Meredith McCanse (she/her): Do you have to use the word? Do you have to use the word lambda, because it's a lambda function, or you use the word, because in the previous step that was the keyword in this particular example.

987
01:27:30.980 --> 01:27:33.609
Anthony Taylor: no, ma'am, lambda is required.

988
01:27:33.950 --> 01:27:34.700
Meredith McCanse (she/her): Okay.

989
01:27:35.300 --> 01:27:39.160
Anthony Taylor: okay, to to say that. Yes, we are doing a lambda function.

990
01:27:39.400 --> 01:27:41.429
Meredith McCanse (she/her): Okay? Okay? So here, in

991
01:27:41.780 --> 01:27:44.520
Anthony Taylor: the exact same as

992
01:27:44.850 --> 01:27:48.140
Anthony Taylor: this one here except for now, instead of

993
01:27:48.220 --> 01:27:50.240
Anthony Taylor: defining this function.

994
01:27:50.360 --> 01:27:54.979
Anthony Taylor: we're gonna do it in an anonymous function. So we're gonna say, Hey.

995
01:27:55.000 --> 01:28:00.740
Anthony Taylor: land defunction X is my argument. This is what I want you to do with X

996
01:28:01.760 --> 01:28:05.359
Anthony Taylor: and do it with each one of these values.

997
01:28:05.800 --> 01:28:14.379
Anthony Taylor: Then return all of this as a list cause. It's still going to be a map object. But we're gonna convert it to a list. And as you'll see

998
01:28:14.500 --> 01:28:18.140
Anthony Taylor: the exact same list.

999
01:28:19.760 --> 01:28:20.750
Anthony Taylor: Okay.

1000
01:28:22.180 --> 01:28:30.870
Anthony Taylor: alright. One more thing. I do have good news on this, but I'm gonna wait till the end. A filter function.

1001
01:28:31.230 --> 01:28:35.730
Anthony Taylor: So it's most often used to get rid of stuff. It kind of makes sense. It's called filter.

1002
01:28:36.160 --> 01:28:42.810
Anthony Taylor: Okay? The data returned from using the filter function will just test things removed

1003
01:28:42.850 --> 01:28:51.450
Anthony Taylor: and is most often used with a lambda function. This is why we show you now. Okay, so here we've got these numbers.

1004
01:28:51.770 --> 01:28:55.299
Anthony Taylor: We want to get rid of all numbers that are not divisible by 3.

1005
01:28:57.030 --> 01:29:00.589
Anthony Taylor: So we do. We're going to convert it to a list.

1006
01:29:00.860 --> 01:29:11.649
Anthony Taylor: Here's the filter method. So it's like map. But it's filter. We're gonna pass in Lambda X is our argument. We want X, MoD, 3, equals 0.

1007
01:29:11.940 --> 01:29:22.339
Anthony Taylor: And then we're gonna pass in this list of numbers. Whichever one of these are true will be returned. and there you go.

1008
01:29:23.370 --> 01:29:25.520
Anthony Taylor: These are the numbers divisible by 3.

1009
01:29:28.550 --> 01:29:29.510
Anthony Taylor: Okay.

1010
01:29:31.470 --> 01:29:35.630
Anthony Taylor: alright. Before I give you guys the good news. any questions.

1011
01:29:38.130 --> 01:29:39.120
Meredith McCanse (she/her): Lesson.

1012
01:29:40.020 --> 01:29:41.230
Anthony Taylor: Go ahead. I'm ready

1013
01:29:41.560 --> 01:29:47.270
Meredith McCanse (she/her): for the filter function. If you have a really large data set, is there any

1014
01:29:47.530 --> 01:29:53.459
Meredith McCanse (she/her): and balance you can do to make sure you didn't accidentally lose data. You didn't want to lose

1015
01:29:55.920 --> 01:30:01.980
Anthony Taylor: normally. So the filter function in this scenario is for a row or for a list or Tuple.

1016
01:30:04.020 --> 01:30:08.809
Anthony Taylor: I suppose you could. Yeah, you could do it with any iterable. But when we're talking about data

1017
01:30:09.050 --> 01:30:10.150
Anthony Taylor: that's next week.

1018
01:30:10.610 --> 01:30:12.050
Anthony Taylor: and you wouldn't use this.

1019
01:30:12.840 --> 01:30:15.350
Meredith McCanse (she/her): you won't use this when you're dealing with data.

1020
01:30:15.700 --> 01:30:23.080
Anthony Taylor: not lots of date. You might use it if you're dealing with row by row, but in most cases you won't even be doing row by row date.

1021
01:30:23.920 --> 01:30:32.020
Anthony Taylor: Okay? Yeah. Cause that's just too nonperformant. Okay, okay, so we will cover data.

1022
01:30:32.220 --> 01:30:38.270
Anthony Taylor: Pandas is all data. And it's the next 2 weeks. Okay. Hi, ron.

1023
01:30:41.310 --> 01:30:46.029
Masarirambi, Rodney: alright. So this kind of piggybacks off of this question. But

1024
01:30:46.100 --> 01:30:51.309
Masarirambi, Rodney: I think I understood. I think I understand it. I'm not too worried about that. But

1025
01:30:52.700 --> 01:30:57.700
Anthony Taylor: where would where would we use it? Part of the good news?

1026
01:30:58.330 --> 01:31:05.239
Anthony Taylor: It's coming with the good news. I'll answer your question after Max. Don't go anywhere. Please stand ball. Yeah. Man.

1027
01:31:05.560 --> 01:31:12.860
Dipinto, Matt: is it always a conditional for the this? Yeah, the statement after the lamp, it can actually be almost anything.

1028
01:31:13.500 --> 01:31:17.920
Anthony Taylor: Okay, you could put well for filter. It's always a conditional

1029
01:31:18.150 --> 01:31:20.719
Anthony Taylor: okay. But for the map for the map, no.

1030
01:31:21.770 --> 01:31:31.929
Dipinto, Matt: Roger on the map. And so so filtering is always a condition. So it's just filter. I mean, there has to be something in there to differentiate the objects. Yes.

1031
01:31:32.990 --> 01:31:35.320
Anthony Taylor: yeah. that's a good question.

1032
01:31:35.400 --> 01:31:41.789
Anthony Taylor: Okay? So here's the good news. And and this is all. Now you look at. Okay, I do python every

1033
01:31:41.860 --> 01:31:42.980
Anthony Taylor: day.

1034
01:31:44.540 --> 01:31:46.190
Anthony Taylor: probably for the last

1035
01:31:47.950 --> 01:31:54.920
Anthony Taylor: 8 years. Okay. I use lambda functions. Never.

1036
01:31:56.320 --> 01:31:57.160
Anthony Taylor: ever

1037
01:31:58.310 --> 01:32:10.859
Anthony Taylor: should I use them more often problems. Do you have to use them? Absolutely not. Okay. You can do it the way we've been doing it with the define, like the one at the top.

1038
01:32:11.360 --> 01:32:12.829
Anthony Taylor: Define a function.

1039
01:32:13.130 --> 01:32:16.030
Anthony Taylor: Call the function. I will tell you. Map, Jerry King.

1040
01:32:16.740 --> 01:32:21.780
Anthony Taylor: Like, if you define a function and you want to run it against a whole bunch of stuff, use, Mac. It's great.

1041
01:32:22.510 --> 01:32:24.849
Anthony Taylor: Okay, but but

1042
01:32:25.680 --> 01:32:27.150
Anthony Taylor: but don't use it very often.

1043
01:32:28.170 --> 01:32:37.779
Anthony Taylor: so I do want you to know about it. Want you to understand it. I would love you to learn it, and I'd be even pleased as Punch if I saw some of you using it in your code.

1044
01:32:38.330 --> 01:32:42.740
Anthony Taylor: There's nothing wrong with it could be an interview question.

1045
01:32:44.260 --> 01:32:48.280
Anthony Taylor: Okay? Cause. There are people out there like Oh, well, you don't not do that.

1046
01:32:48.600 --> 01:32:50.030
Anthony Taylor: you know. No, python.

1047
01:32:50.270 --> 01:32:54.889
Anthony Taylor: I love actually my, my! And I haven't told you guys this big note.

1048
01:32:54.910 --> 01:33:01.369
Anthony Taylor: there is a website called medium.com. Okay, it's basically a blog site.

1049
01:33:01.440 --> 01:33:11.979
Anthony Taylor: But and they have everything, not just python and science and AI, but they have very good python data, science and AI articles.

1050
01:33:12.600 --> 01:33:18.759
Anthony Taylor: It's 5 bucks a month for unlimited reading. I don't get a kick back. So you decide if you want it.

1051
01:33:18.880 --> 01:33:22.240
Anthony Taylor: But There's always somebody

1052
01:33:22.400 --> 01:33:29.030
Anthony Taylor: people can tell if you're not an experienced python developer. If you don't do this like that's crap.

1053
01:33:29.410 --> 01:33:31.970
Anthony Taylor: I know how to do it. I don't want to.

1054
01:33:33.000 --> 01:33:34.780
Anthony Taylor: Okay, it's just not my thing.

1055
01:33:34.940 --> 01:33:39.700
Anthony Taylor: I don't get it. I don't dig it. I understand how it works. I just don't want to do it. I think

1056
01:33:39.720 --> 01:33:45.340
Anthony Taylor: I've had. I've heard other python dance like, Oh, I do whatever just kid more power to you.

1057
01:33:46.450 --> 01:33:55.199
Anthony Taylor: So you need to know it. You need to learn it, need it, probably for your challenge. But outside of that you decide if you like it.

1058
01:33:55.380 --> 01:33:57.260
Anthony Taylor: Use it lots if you don't.

1059
01:33:57.360 --> 01:34:04.540
Anthony Taylor: That's fine, too. Okay, you can stick with the way I showed you at the top. Captain. You do a lot of pipeline. Right?

1060
01:34:06.470 --> 01:34:11.370
Anthony Taylor: Do you use it? Very often? Not recently.

1061
01:34:11.910 --> 01:34:18.050
Anthony Taylor: Yeah, it's just not. It's not that phone any of my other python days. Use that a lot curry

1062
01:34:19.210 --> 01:34:20.080
Anthony Taylor: now.

1063
01:34:20.240 --> 01:34:24.139
Anthony Taylor: like I said Kevin, I think Kevin has told me that sometimes he's dead

1064
01:34:29.010 --> 01:34:30.670
Kevin Nguyen: once in a while, not too often.

1065
01:34:30.910 --> 01:34:34.530
Anthony Taylor: Yeah, same. It's kind of how I feel cases. Yeah.

1066
01:34:35.580 --> 01:34:40.150
Anthony Taylor: So again, it's good to know. Don't want you to just blow it off.

1067
01:34:40.410 --> 01:34:42.359
Anthony Taylor: I showed it to you for a reason.

1068
01:34:43.380 --> 01:34:49.629
Anthony Taylor: but don't get too too su hung up on a beat. Alright! Let's look at the exercise with this

1069
01:34:50.200 --> 01:34:59.750
Anthony Taylor: so anonymous functions. You got the list. and what do they want you? Do they want you to get the even numbers using filter.

1070
01:35:01.980 --> 01:35:05.040
Anthony Taylor: So compared to what we just did?

1071
01:35:06.760 --> 01:35:22.460
Anthony Taylor: This would be very similar. In fact, you'd have to change one number in the example I gave you to make this work. Okay? And I'm not going to tell you what that means use map and lambda to add numbers for both lists that could be challenging.

1072
01:35:22.930 --> 01:35:32.070
Anthony Taylor: Use the map and lambda function to split the following sentence into words. so guys, you're gonna have to think about this, this is not a gimme.

1073
01:35:32.510 --> 01:35:33.900
Anthony Taylor: this particular what?

1074
01:35:34.320 --> 01:35:42.809
Anthony Taylor: Okay? And feel free to think how we do it as a function, and then just try to convert it into a lambda or or a map.

1075
01:35:43.520 --> 01:35:44.490
Anthony Taylor: Alright.

1076
01:35:45.060 --> 01:35:48.199
Anthony Taylor: Okay. So 10 min on this one

1077
01:35:49.460 --> 01:35:50.660
Anthony Taylor: ready set.

1078
01:36:00.580 --> 01:36:05.499
Anthony Taylor: let's get back to it. We do have to do anybody

1079
01:36:06.020 --> 01:36:11.389
Anthony Taylor: anybody like paste it. This was so easy you shouldn't even have made us do this.

1080
01:36:13.090 --> 01:36:14.369
Anthony Taylor: Gabe did.

1081
01:36:14.500 --> 01:36:26.310
Anthony Taylor: We were sort of trying to figure out the split function. I don't know that we talked about that one split. We haven't. So that's fantastic that you looked into that. Were we not supposed to do that one?

1082
01:36:26.790 --> 01:36:41.320
Anthony Taylor: I don't know. Let's look and see. Look at the solution and see what kind of fun stuff we did here. so it said, Give us not. Did everybody figure out what I was talking about? Elliot, change one number? What was the one number?

1083
01:36:42.290 --> 01:36:49.840
Anthony Taylor: Change it from a 3 to a 2. That one was pretty straightforward, right? A.

1084
01:36:51.690 --> 01:36:54.370
Anthony Taylor: So this one use the map to

1085
01:36:54.580 --> 01:37:02.130
Anthony Taylor: add the numbers from both lists. That's an interesting one. We did not talk about this. So how many people got this one?

1086
01:37:03.810 --> 01:37:06.150
Anthony Taylor: Anybody? Good Curry?

1087
01:37:06.930 --> 01:37:14.020
Anthony Taylor: Okay, alright good. Yes, it happened alright. So I'm so bad. Well, some of you were in the same.

1088
01:37:14.900 --> 01:37:22.459
Anthony Taylor: Yeah, okay, so this one's interesting. I mean, it's logical. But it's the first time we've actually talked about this.

1089
01:37:22.490 --> 01:37:23.700
Anthony Taylor: and that is.

1090
01:37:24.030 --> 01:37:29.149
Anthony Taylor: we send map, Lambda, and then we have 2 arguments

1091
01:37:30.620 --> 01:37:35.889
Anthony Taylor: and the 2 arguments. We wanted to add them together, and we have 2 lists.

1092
01:37:36.900 --> 01:37:39.000
Anthony Taylor: One list is going to populate

1093
01:37:39.260 --> 01:37:42.539
Anthony Taylor: the first argument, and the second would populate

1094
01:37:42.550 --> 01:37:43.869
Anthony Taylor: the second argument.

1095
01:37:45.280 --> 01:37:51.469
Anthony Taylor: Alright, I didn't show you this, so I would not be surprised if you did not get this if you did. Great!

1096
01:37:51.590 --> 01:37:53.470
Anthony Taylor: If you didn't, that's fine, too.

1097
01:37:54.650 --> 01:37:56.809
Anthony Taylor: Okay. that's how you do.

1098
01:37:57.030 --> 01:37:59.089
Masarirambi, Rodney: Could you? Could you use some on that one?

1099
01:37:59.850 --> 01:38:05.240
Anthony Taylor:  well, you would have had to combine the list. I

1100
01:38:05.350 --> 01:38:08.480
Anthony Taylor: yeah, you could have some numbers and numbers, too. Sure.

1101
01:38:09.050 --> 01:38:11.820
Anthony Taylor: I would think I don't know and try it.

1102
01:38:12.550 --> 01:38:14.279
Anthony Taylor: Did you try it? Did it work?

1103
01:38:14.340 --> 01:38:18.180
Masarirambi, Rodney: We tried it it. We didn't get that far. We.

1104
01:38:18.490 --> 01:38:30.339
Anthony Taylor: as you guys are gonna find as we get better and better at this.

1105
01:38:30.730 --> 01:38:41.990
Anthony Taylor: there's a lot of stuff that you could do a little differently. And it's not always bad. Okay. Obviously, like I told you, and your challenges and stuff don't do things differently than we show you.

1106
01:38:42.300 --> 01:38:45.229
Anthony Taylor: But that's only because we don't want you to go down a

1107
01:38:45.730 --> 01:38:46.860
Anthony Taylor: a path that

1108
01:38:47.030 --> 01:38:48.690
Anthony Taylor: of more resistance.

1109
01:38:49.630 --> 01:38:55.900
Anthony Taylor: Okay. So here they wanted you to split. So is this where you were trying to use split? Miss Meredith.

1110
01:38:57.620 --> 01:39:04.090
Gebrekristos, Hafton: Yeah. Well, the way we go, though it wouldn't give us a word, it would give us each character.

1111
01:39:04.130 --> 01:39:13.160
Gebrekristos, Hafton: each letter. Yeah. So in this case we have X is our. We're going to strip it.

1112
01:39:13.330 --> 01:39:25.609
Anthony Taylor: And then to make it iterable. You needed to split the sentence right. If you just pass in the sentence and tried to split it. Here, you're going to get each letter.

1113
01:39:27.380 --> 01:39:29.739
Anthony Taylor: Okay? Cause then it's just a string.

1114
01:39:30.290 --> 01:39:37.690
Anthony Taylor: But if you do sentence split, it's it'll it'll split on the space. You could have also. Told it to split on the space.

1115
01:39:38.310 --> 01:39:42.610
Dipinto, Matt: Yes, really, really hard way to just put split with the space in it.

1116
01:39:43.260 --> 01:39:45.300
Anthony Taylor: I know.

1117
01:39:45.690 --> 01:39:47.230
Anthony Taylor: but I mean.

1118
01:39:47.860 --> 01:39:54.009
Anthony Taylor: the idea is to get them practicing. Yes, what does what does strip do?

1119
01:39:54.720 --> 01:39:57.130
Anthony Taylor: Strip like takes away white spaces?

1120
01:39:57.420 --> 01:39:58.990
Anthony Taylor: Or if those faces.

1121
01:39:59.310 --> 01:40:00.420
Anthony Taylor: Yeah, okay.

1122
01:40:01.330 --> 01:40:12.139
Anthony Taylor: And we talked about that. And I just don't remember. Or this is the first time we're hearing. Okay, that's that's why I said, this exercise is not any sketch. I told you guys, this one's gonna take stop.

1123
01:40:12.460 --> 01:40:18.929
Anthony Taylor: Okay? Because there was a lot of you probably needed to Google this stuff. and there was only 3 of them.

1124
01:40:20.020 --> 01:40:23.510
Anthony Taylor: That's alright. Sometimes we throw those in there. Keep you honest.

1125
01:40:24.510 --> 01:40:26.359
Anthony Taylor: Okay.

1126
01:40:26.660 --> 01:40:40.579
Anthony Taylor: last, but not least for the day. Believe it or not, we made it to the end. And just for the record. If anyone is interested in that video, I didn't locate it, I will play it. If nobody needs me in office hours, I can turn it on in there, and if anybody wants to watch it you can.

1127
01:40:41.120 --> 01:40:45.340
It's a really great example of students

1128
01:40:45.380 --> 01:40:47.329
Anthony Taylor: at the end of the course.

1129
01:40:48.150 --> 01:40:53.490
Anthony Taylor: Okay? And where they ended up. And and if you're interested again, not the same course. But

1130
01:40:54.420 --> 01:41:01.500
Anthony Taylor: you'll understand the confidence level. Everything else is there anyway. So when we comment our code.

1131
01:41:02.630 --> 01:41:11.190
Anthony Taylor: these are the things we want you to put in. Okay. we want you to give a brief description. You can get more of a description.

1132
01:41:11.430 --> 01:41:19.469
Anthony Taylor: the arguments that are needed for the function. what it returns. If there are any errors.

1133
01:41:19.520 --> 01:41:22.490
Anthony Taylor: maybe even examples of how to use the function.

1134
01:41:22.620 --> 01:41:30.240
Anthony Taylor: Okay, this is extreme. And any additional notes. Okay, that is good documentation.

1135
01:41:32.660 --> 01:41:36.620
Anthony Taylor: Aye. that sounds cool. Right? Hold on. Let me show you so.

1136
01:41:37.810 --> 01:41:42.500
Anthony Taylor: So we're using Vs code. We like Vs code Vs code is our friend.

1137
01:41:43.050 --> 01:41:48.300
Anthony Taylor:  you know, I don't need that. Let's just grab this notebook.

1138
01:41:48.590 --> 01:41:55.250
Anthony Taylor: Let's go make a new cell and let's do define

1139
01:41:56.060 --> 01:41:58.290
Anthony Taylor: pool function.

1140
01:42:01.500 --> 01:42:02.180
Anthony Taylor: Double.

1141
01:42:05.740 --> 01:42:09.920
Anthony Taylor: Okay? Over here is a cooled extension.

1142
01:42:10.250 --> 01:42:12.549
Anthony Taylor: It's called docstring

1143
01:42:13.590 --> 01:42:16.930
Anthony Taylor: alright. and pretty much

1144
01:42:18.300 --> 01:42:21.870
Anthony Taylor: pretty sure it'll work in a notebook. Not positive. But let's find out.

1145
01:42:22.240 --> 01:42:26.050
Anthony Taylor: Might have to do a python file for this. Where'd I go?

1146
01:42:26.490 --> 01:42:29.019
Anthony Taylor: Here it is. Do quote, quote, quote

1147
01:42:30.130 --> 01:42:30.920
Anthony Taylor: Tab.

1148
01:42:34.790 --> 01:42:45.920
Anthony Taylor: alright, and it gives you the structure. Obviously, I don't have much in there yet, but this will automatically fill in that structure for you. If this function was done like, if we go to.

1149
01:42:46.320 --> 01:42:48.840
Anthony Taylor: let's go up to one of our functions from earlier.

1150
01:42:50.790 --> 01:42:55.189
Anthony Taylor: That's just cut that out. And we just type

1151
01:42:57.170 --> 01:42:58.629
Anthony Taylor: quote. Quote.

1152
01:42:59.030 --> 01:43:01.969
Anthony Taylor: Oh, it didn't give it to me that time. That's no fun.

1153
01:43:02.660 --> 01:43:14.529
Anthony Taylor: I think it's cause. It's oh, there's no arguments or anything. So that's not a good example. But anyway, Quote, Quote, we'll give you basically that outline. I know there was a lot more in the one that I showed you.

1154
01:43:14.610 --> 01:43:24.809
Anthony Taylor: This is the most. So there is an activity for this. It's actually not too bad, and it's kind of fun. And what do they want? They want you to comment this code.

1155
01:43:26.180 --> 01:43:30.779
Anthony Taylor: That's it. So you're gonna go line by line you're gonna start with

1156
01:43:31.100 --> 01:43:34.069
Anthony Taylor: might be able to do. Quote quote here, if you wanna

1157
01:43:37.310 --> 01:43:39.060
Anthony Taylor: no, that was not very good.

1158
01:43:40.120 --> 01:43:46.129
Anthony Taylor: I will. I will tell you another trick. Our our friend Chatti Pittee.

1159
01:43:47.410 --> 01:43:50.699
Anthony Taylor: And this I, 100%

1160
01:43:50.960 --> 01:43:52.649
Anthony Taylor: use this a lot

1161
01:43:56.560 --> 01:44:00.370
Anthony Taylor: cause I write a lot of functions. And I don't document them all.

1162
01:44:18.250 --> 01:44:20.080
Anthony Taylor: And this doesn't so damn well.

1163
01:44:22.390 --> 01:44:23.210
Anthony Taylor: okay.

1164
01:44:23.980 --> 01:44:27.690
Anthony Taylor: this even comes up with like a document to send with the function.

1165
01:44:28.530 --> 01:44:29.850
Anthony Taylor: You don't have to go that far.

1166
01:44:31.780 --> 01:44:35.400
Anthony Taylor: So just keep in mind, that's enough.

1167
01:44:35.440 --> 01:44:38.750
Anthony Taylor: yeah. So let's do this activity. 10 min.

1168
01:44:38.880 --> 01:44:42.449
Anthony Taylor: Document this thing. I don't care how you do it. Do it

1169
01:44:42.730 --> 01:44:43.830
Anthony Taylor: best. Look at

1170
01:44:44.480 --> 01:44:45.869
Mcpherson, Michael: what was that extension

1171
01:44:47.900 --> 01:44:51.840
Anthony Taylor: which extend, oh, oh, this one docs auto, Doc stream.

1172
01:44:57.840 --> 01:44:59.729
Anthony Taylor: If you want to download the extension

1173
01:45:02.700 --> 01:45:07.319
Anthony Taylor: cool. I will show you. I don't use copilot here in class

1174
01:45:08.370 --> 01:45:13.129
Anthony Taylor:  but if you have copilot

1175
01:45:14.330 --> 01:45:16.469
Anthony Taylor: you can do the same thing

1176
01:45:18.610 --> 01:45:22.340
Anthony Taylor: where I put it. You guys see it. It's on my screen. I just don't ever see it.

1177
01:45:23.040 --> 01:45:26.989
Anthony Taylor: Refactor running interactive. Oh, it's up there.

1178
01:45:28.100 --> 01:45:30.410
Meredith McCanse (she/her): Do you wanna meet Doc String? Is that what you're looking for?

1179
01:45:30.810 --> 01:45:32.610
Meredith McCanse (she/her): Do with it? Although that I have a

1180
01:45:33.070 --> 01:45:35.120
Anthony Taylor: now I have copilot on here.

1181
01:45:35.440 --> 01:45:40.610
Anthony Taylor: It's a pay thing that you can put on your oh, it's turned off the

1182
01:45:41.780 --> 01:45:45.649
Anthony Taylor: I told it to come on. Anyway, it's basically

1183
01:45:46.170 --> 01:45:49.580
Anthony Taylor: it's a service that you can buy for your Vs code.

1184
01:45:49.600 --> 01:45:56.420
Anthony Taylor: And it's basically like, Chat, Gpg, I could just highlight. The code. Say, explain this to me, or comment it, or whatever.

1185
01:45:56.870 --> 01:46:01.260
Anthony Taylor: Alright, I wouldn't recommend it. It's actually kind of payment. But that's why I turned it off.

1186
01:46:01.300 --> 01:46:02.670
Anthony Taylor: Hi! 10 min.

1187
01:46:03.620 --> 01:46:09.240
Anthony Taylor: Well, then, you did a good job, that's the least that's the least I would want for you. So that's great.

1188
01:46:09.690 --> 01:46:12.670
Anthony Taylor: That is great as long as we get.

1189
01:46:14.010 --> 01:46:24.440
Anthony Taylor: I just wanna make sure that you guys are understanding what it's at telling. That sounds that's good. That's good. So there's really not much to review. I mean.

1190
01:46:24.660 --> 01:46:27.210
Anthony Taylor: anybody. Have any questions about the documentation.

1191
01:46:27.950 --> 01:46:32.650
Anthony Taylor: Just do a good job. Make your code friendly. I will tell you.

1192
01:46:33.550 --> 01:46:36.969
Anthony Taylor: as we get into the AI parts of this course.

1193
01:46:37.170 --> 01:46:41.450
Anthony Taylor: having well documented code, will make your life spirit

1194
01:46:43.050 --> 01:46:50.289
Anthony Taylor: all right. And I don't mean because you need to document your AI code. I mean, like, if you want your AI to look at your code

1195
01:46:50.770 --> 01:46:54.649
Anthony Taylor: right? It helps for it to understand what you were trying to do

1196
01:46:55.220 --> 01:47:02.200
Anthony Taylor: to the point where we could delete the code and just put in the comments, and the AI would fill it in for it.

1197
01:47:04.160 --> 01:47:08.530
Anthony Taylor: Okay, so that's some of the kind of fun stuff we could do with that. Yeah, Christy.

1198
01:47:09.170 --> 01:47:10.390
Kanouff, Christine: So

1199
01:47:11.470 --> 01:47:20.439
Kanouff, Christine: were there, what would you were there arguments in this? Or what would you consider an argument in this? There's no arguments. Okay.

1200
01:47:20.810 --> 01:47:23.500
Anthony Taylor: yeah. And you can tell, like, what's in parentheses here.

1201
01:47:24.270 --> 01:47:28.079
Anthony Taylor: there's just nothing there. So there's no arguments.

1202
01:47:28.260 --> 01:47:29.080
Kanouff, Christine: Okay.

1203
01:47:30.160 --> 01:47:38.620
Anthony Taylor: now, what I would have, I mean, if I was writing this, I might have tried to like, how many topics do you want? So maybe we'll call it with for 3 topics

1204
01:47:38.660 --> 01:47:42.400
Kanouff, Christine: instead of they hard-coded it to 3. Umhm.

1205
01:47:43.580 --> 01:47:45.569
Anthony Taylor: So. But sorry.

1206
01:47:47.740 --> 01:47:49.210
Anthony Taylor: Yes, Sonya.

1207
01:47:49.760 --> 01:47:50.730
Baro, Sonja: so

1208
01:47:51.990 --> 01:47:57.190
Baro, Sonja: sorry. I just got my question. So we actually.

1209
01:47:58.040 --> 01:48:01.749
Baro, Sonja: we went through, I guess. Let me back up. We didn't

1210
01:48:01.820 --> 01:48:13.779
Baro, Sonja: formatted exactly like that. The function prompts the user with ours. None returns. None that can. We literally just said. here's what this does. It's. Gonna

1211
01:48:13.910 --> 01:48:24.850
Baro, Sonja: and then it's gonna use the topping list and ask the user to identify 3 toppings that input will continue to be iterate until the Max number of toppings is reached.

1212
01:48:25.060 --> 01:48:36.230
Baro, Sonja: Final pizza order displayed. So like, I'm good with that coder friendly user friendliness, I think we got there. But we didn't like put every single

1213
01:48:36.320 --> 01:48:38.389
Baro, Sonja: element.

1214
01:48:38.910 --> 01:48:45.719
Baro, Sonja: yeah. So I was just asking if we had to follow that particular format.

1215
01:48:45.730 --> 01:48:49.140
Anthony Taylor: There are official standards that nobody follows.

1216
01:48:49.250 --> 01:48:58.140
Anthony Taylor: But I want to show you why we do this, guys. I want you to see something. So notice this, this is what they did doesn't matter what it is.

1217
01:48:58.300 --> 01:49:04.120
Anthony Taylor: Okay. Now, I typed the function down here at the bottom watch. What happens?

1218
01:49:06.700 --> 01:49:07.809
Anthony Taylor: You see? There.

1219
01:49:07.860 --> 01:49:09.580
Baro, Sonja: yeah, I just gave it to you.

1220
01:49:10.050 --> 01:49:14.479
Anthony Taylor: It just told me everything that's in that. Now, if you wouldn't have done that, it would have told me nothing.

1221
01:49:16.410 --> 01:49:21.520
Anthony Taylor: Okay. So by filling in that documentation, one of the things that's gonna help you with

1222
01:49:21.550 --> 01:49:26.869
Anthony Taylor: is, now, if you call this function later. you can go. Oh, yeah, that's the

1223
01:49:28.070 --> 01:49:33.269
Baro, Sonja: you don't have to go back and look at it and figure it out. That's a good point. This is just a cool feature.

1224
01:49:33.650 --> 01:49:38.610
Anthony Taylor: Not all Ids do this. But Vs code does.

1225
01:49:39.870 --> 01:49:41.800
Anthony Taylor: Okay? So

1226
01:49:42.000 --> 01:49:49.019
Anthony Taylor: again, that's all. But hey, real quick guys, I don't actually look at the chat unless you guys are in the breakout room usually.

1227
01:49:49.330 --> 01:49:54.849
Anthony Taylor: So if you chat and you're trying to say something you want me to see, I'm not going to see it just heads up

1228
01:49:55.130 --> 01:49:57.210
Anthony Taylor: until you're a breakup

1229
01:49:57.710 --> 01:50:05.470
Anthony Taylor:  other than that guys. Great work. How do you guys feel overall? Was I right? Was the woman's birthday, and it was last week.

1230
01:50:05.980 --> 01:50:07.090
Anthony Taylor: Mostly

1231
01:50:07.280 --> 01:50:11.709
Anthony Taylor: some of you are like, I thought, stay was way smooth

1232
01:50:12.130 --> 01:50:14.719
Anthony Taylor: way, nicer. It was lot slower.

1233
01:50:15.960 --> 01:50:19.209
Anthony Taylor: Okay, hiking. We'll have a great Tuesday.

1234
01:50:19.780 --> 01:50:26.090
Anthony Taylor: and I will see you Wednesday with more excitement. Remember to check the resources gang.

1235
01:50:26.320 --> 01:50:29.750
Anthony Taylor:  yeah.

1236
01:50:30.830 --> 01:50:32.529
Anthony Taylor: I'm just checking to see what we're doing

1237
01:50:33.220 --> 01:50:34.910
more functions

1238
01:50:36.680 --> 01:50:40.750
Anthony Taylor: and user stories. That'll be interesting.

1239
01:50:41.880 --> 01:50:45.330
Anthony Taylor: So that'll be fun. So I'm just like, that'll be easy.

1240
01:50:46.000 --> 01:50:49.860
Anthony Taylor: Okay, have a good one. If you want to stay and watch that video like I'll have it.

1241
01:50:50.020 --> 01:50:54.030
Anthony Taylor: If there's time during office hours there should be. You can watch it then.

1242
01:50:54.430 --> 01:50:56.390
Meredith McCanse (she/her): Thank you. Bye.

